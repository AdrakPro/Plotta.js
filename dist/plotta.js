!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="./dist/",n(n.s=111)}([function(t,e,n){var r=n(2),i=n(8),o=n(13),a=n(10),s=n(20),u=function(t,e,n){var c,l,f,h,v=t&u.F,d=t&u.G,p=t&u.S,y=t&u.P,g=t&u.B,b=d?r:p?r[e]||(r[e]={}):(r[e]||{}).prototype,w=d?i:i[e]||(i[e]={}),x=w.prototype||(w.prototype={});for(c in d&&(n=e),n)f=((l=!v&&b&&void 0!==b[c])?b:n)[c],h=g&&l?s(f,r):y&&"function"==typeof f?s(Function.call,f):f,b&&a(b,c,f,t&u.U),w[c]!=f&&o(w,c,h),y&&x[c]!=f&&(x[c]=f)};r.core=i,u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(3);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e,n){var r=n(57)("wks"),i=n(29),o=n(2).Symbol,a="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=a&&o[t]||(a?o:i)("Symbol."+t))}).store=r},function(t,e,n){var r=n(4),i=n(81),o=n(26),a=Object.defineProperty;e.f=n(7)?Object.defineProperty:function(t,e,n){if(r(t),e=o(e,!0),r(n),i)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){t.exports=!n(1)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e){var n=t.exports={version:"2.5.7"};"number"==typeof __e&&(__e=n)},function(t,e,n){var r=n(24),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,e,n){var r=n(2),i=n(13),o=n(12),a=n(29)("src"),s=Function.toString,u=(""+s).split("toString");n(8).inspectSource=function(t){return s.call(t)},(t.exports=function(t,e,n,s){var c="function"==typeof n;c&&(o(n,"name")||i(n,"name",e)),t[e]!==n&&(c&&(o(n,a)||i(n,a,t[e]?""+t[e]:u.join(String(e)))),t===r?t[e]=n:s?t[e]?t[e]=n:i(t,e,n):(delete t[e],i(t,e,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||s.call(this)})},function(t,e,n){var r=n(0),i=n(1),o=n(23),a=/"/g,s=function(t,e,n,r){var i=String(o(t)),s="<"+e;return""!==n&&(s+=" "+n+'="'+String(r).replace(a,"&quot;")+'"'),s+">"+i+"</"+e+">"};t.exports=function(t,e){var n={};n[t]=e(s),r(r.P+r.F*i(function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}),"String",n)}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(6),i=n(28);t.exports=n(7)?function(t,e,n){return r.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(43),i=n(23);t.exports=function(t){return r(i(t))}},function(t,e,n){var r=n(23);t.exports=function(t){return Object(r(t))}},function(t,e,n){"use strict";var r=n(1);t.exports=function(t,e){return!!t&&r(function(){e?t.call(null,function(){},1):t.call(null)})}},function(t,e,n){var r=n(44),i=n(28),o=n(14),a=n(26),s=n(12),u=n(81),c=Object.getOwnPropertyDescriptor;e.f=n(7)?c:function(t,e){if(t=o(t),e=a(e,!0),u)try{return c(t,e)}catch(t){}if(s(t,e))return i(!r.f.call(t,e),t[e])}},function(t,e,n){var r=n(0),i=n(8),o=n(1);t.exports=function(t,e){var n=(i.Object||{})[t]||Object[t],a={};a[t]=e(n),r(r.S+r.F*o(function(){n(1)}),"Object",a)}},function(t,e,n){var r=n(20),i=n(43),o=n(15),a=n(9),s=n(206);t.exports=function(t,e){var n=1==t,u=2==t,c=3==t,l=4==t,f=6==t,h=5==t||f,v=e||s;return function(e,s,d){for(var p,y,g=o(e),b=i(g),w=r(s,d,3),x=a(b.length),m=0,S=n?v(e,x):u?v(e,0):void 0;x>m;m++)if((h||m in b)&&(y=w(p=b[m],m,g),t))if(n)S[m]=y;else if(y)switch(t){case 3:return!0;case 5:return p;case 6:return m;case 2:S.push(p)}else if(l)return!1;return f?-1:c||l?l:S}}},function(t,e,n){var r=n(21);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){"use strict";if(n(7)){var r=n(30),i=n(2),o=n(1),a=n(0),s=n(55),u=n(80),c=n(20),l=n(40),f=n(28),h=n(13),v=n(41),d=n(24),p=n(9),y=n(106),g=n(32),b=n(26),w=n(12),x=n(47),m=n(3),S=n(15),M=n(73),k=n(33),P=n(35),D=n(34).f,_=n(75),E=n(29),T=n(5),O=n(19),L=n(45),A=n(52),F=n(77),N=n(37),R=n(49),G=n(39),C=n(76),j=n(98),I=n(6),H=n(17),V=I.f,W=H.f,U=i.RangeError,Y=i.TypeError,B=i.Uint8Array,X=Array.prototype,z=u.ArrayBuffer,q=u.DataView,K=O(0),J=O(2),Z=O(3),$=O(4),Q=O(5),tt=O(6),et=L(!0),nt=L(!1),rt=F.values,it=F.keys,ot=F.entries,at=X.lastIndexOf,st=X.reduce,ut=X.reduceRight,ct=X.join,lt=X.sort,ft=X.slice,ht=X.toString,vt=X.toLocaleString,dt=T("iterator"),pt=T("toStringTag"),yt=E("typed_constructor"),gt=E("def_constructor"),bt=s.CONSTR,wt=s.TYPED,xt=s.VIEW,mt=O(1,function(t,e){return Dt(A(t,t[gt]),e)}),St=o(function(){return 1===new B(new Uint16Array([1]).buffer)[0]}),Mt=!!B&&!!B.prototype.set&&o(function(){new B(1).set({})}),kt=function(t,e){var n=d(t);if(n<0||n%e)throw U("Wrong offset!");return n},Pt=function(t){if(m(t)&&wt in t)return t;throw Y(t+" is not a typed array!")},Dt=function(t,e){if(!(m(t)&&yt in t))throw Y("It is not a typed array constructor!");return new t(e)},_t=function(t,e){return Et(A(t,t[gt]),e)},Et=function(t,e){for(var n=0,r=e.length,i=Dt(t,r);r>n;)i[n]=e[n++];return i},Tt=function(t,e,n){V(t,e,{get:function(){return this._d[n]}})},Ot=function(t){var e,n,r,i,o,a,s=S(t),u=arguments.length,l=u>1?arguments[1]:void 0,f=void 0!==l,h=_(s);if(null!=h&&!M(h)){for(a=h.call(s),r=[],e=0;!(o=a.next()).done;e++)r.push(o.value);s=r}for(f&&u>2&&(l=c(l,arguments[2],2)),e=0,n=p(s.length),i=Dt(this,n);n>e;e++)i[e]=f?l(s[e],e):s[e];return i},Lt=function(){for(var t=0,e=arguments.length,n=Dt(this,e);e>t;)n[t]=arguments[t++];return n},At=!!B&&o(function(){vt.call(new B(1))}),Ft=function(){return vt.apply(At?ft.call(Pt(this)):Pt(this),arguments)},Nt={copyWithin:function(t,e){return j.call(Pt(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return $(Pt(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return C.apply(Pt(this),arguments)},filter:function(t){return _t(this,J(Pt(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Q(Pt(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Pt(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){K(Pt(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return nt(Pt(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return et(Pt(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return ct.apply(Pt(this),arguments)},lastIndexOf:function(t){return at.apply(Pt(this),arguments)},map:function(t){return mt(Pt(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return st.apply(Pt(this),arguments)},reduceRight:function(t){return ut.apply(Pt(this),arguments)},reverse:function(){for(var t,e=Pt(this).length,n=Math.floor(e/2),r=0;r<n;)t=this[r],this[r++]=this[--e],this[e]=t;return this},some:function(t){return Z(Pt(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return lt.call(Pt(this),t)},subarray:function(t,e){var n=Pt(this),r=n.length,i=g(t,r);return new(A(n,n[gt]))(n.buffer,n.byteOffset+i*n.BYTES_PER_ELEMENT,p((void 0===e?r:g(e,r))-i))}},Rt=function(t,e){return _t(this,ft.call(Pt(this),t,e))},Gt=function(t){Pt(this);var e=kt(arguments[1],1),n=this.length,r=S(t),i=p(r.length),o=0;if(i+e>n)throw U("Wrong length!");for(;o<i;)this[e+o]=r[o++]},Ct={entries:function(){return ot.call(Pt(this))},keys:function(){return it.call(Pt(this))},values:function(){return rt.call(Pt(this))}},jt=function(t,e){return m(t)&&t[wt]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},It=function(t,e){return jt(t,e=b(e,!0))?f(2,t[e]):W(t,e)},Ht=function(t,e,n){return!(jt(t,e=b(e,!0))&&m(n)&&w(n,"value"))||w(n,"get")||w(n,"set")||n.configurable||w(n,"writable")&&!n.writable||w(n,"enumerable")&&!n.enumerable?V(t,e,n):(t[e]=n.value,t)};bt||(H.f=It,I.f=Ht),a(a.S+a.F*!bt,"Object",{getOwnPropertyDescriptor:It,defineProperty:Ht}),o(function(){ht.call({})})&&(ht=vt=function(){return ct.call(this)});var Vt=v({},Nt);v(Vt,Ct),h(Vt,dt,Ct.values),v(Vt,{slice:Rt,set:Gt,constructor:function(){},toString:ht,toLocaleString:Ft}),Tt(Vt,"buffer","b"),Tt(Vt,"byteOffset","o"),Tt(Vt,"byteLength","l"),Tt(Vt,"length","e"),V(Vt,pt,{get:function(){return this[wt]}}),t.exports=function(t,e,n,u){var c=t+((u=!!u)?"Clamped":"")+"Array",f="get"+t,v="set"+t,d=i[c],g=d||{},b=d&&P(d),w=!d||!s.ABV,S={},M=d&&d.prototype,_=function(t,n){V(t,n,{get:function(){return function(t,n){var r=t._d;return r.v[f](n*e+r.o,St)}(this,n)},set:function(t){return function(t,n,r){var i=t._d;u&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),i.v[v](n*e+i.o,r,St)}(this,n,t)},enumerable:!0})};w?(d=n(function(t,n,r,i){l(t,d,c,"_d");var o,a,s,u,f=0,v=0;if(m(n)){if(!(n instanceof z||"ArrayBuffer"==(u=x(n))||"SharedArrayBuffer"==u))return wt in n?Et(d,n):Ot.call(d,n);o=n,v=kt(r,e);var g=n.byteLength;if(void 0===i){if(g%e)throw U("Wrong length!");if((a=g-v)<0)throw U("Wrong length!")}else if((a=p(i)*e)+v>g)throw U("Wrong length!");s=a/e}else s=y(n),o=new z(a=s*e);for(h(t,"_d",{b:o,o:v,l:a,e:s,v:new q(o)});f<s;)_(t,f++)}),M=d.prototype=k(Vt),h(M,"constructor",d)):o(function(){d(1)})&&o(function(){new d(-1)})&&R(function(t){new d,new d(null),new d(1.5),new d(t)},!0)||(d=n(function(t,n,r,i){var o;return l(t,d,c),m(n)?n instanceof z||"ArrayBuffer"==(o=x(n))||"SharedArrayBuffer"==o?void 0!==i?new g(n,kt(r,e),i):void 0!==r?new g(n,kt(r,e)):new g(n):wt in n?Et(d,n):Ot.call(d,n):new g(y(n))}),K(b!==Function.prototype?D(g).concat(D(b)):D(g),function(t){t in d||h(d,t,g[t])}),d.prototype=M,r||(M.constructor=d));var E=M[dt],T=!!E&&("values"==E.name||null==E.name),O=Ct.values;h(d,yt,!0),h(M,wt,c),h(M,xt,!0),h(M,gt,d),(u?new d(1)[pt]==c:pt in M)||V(M,pt,{get:function(){return c}}),S[c]=d,a(a.G+a.W+a.F*(d!=g),S),a(a.S,c,{BYTES_PER_ELEMENT:e}),a(a.S+a.F*o(function(){g.of.call(d,1)}),c,{from:Ot,of:Lt}),"BYTES_PER_ELEMENT"in M||h(M,"BYTES_PER_ELEMENT",e),a(a.P,c,Nt),G(c),a(a.P+a.F*Mt,c,{set:Gt}),a(a.P+a.F*!T,c,Ct),r||M.toString==ht||(M.toString=ht),a(a.P+a.F*o(function(){new d(1).slice()}),c,{slice:Rt}),a(a.P+a.F*(o(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!o(function(){M.toLocaleString.call([1,2])})),c,{toLocaleString:Ft}),N[c]=T?E:O,r||T||h(M,dt,O)}}else t.exports=function(){}},function(t,e,n){var r=n(3);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var r=n(29)("meta"),i=n(3),o=n(12),a=n(6).f,s=0,u=Object.isExtensible||function(){return!0},c=!n(1)(function(){return u(Object.preventExtensions({}))}),l=function(t){a(t,r,{value:{i:"O"+ ++s,w:{}}})},f=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!u(t))return"F";if(!e)return"E";l(t)}return t[r].i},getWeak:function(t,e){if(!o(t,r)){if(!u(t))return!0;if(!e)return!1;l(t)}return t[r].w},onFreeze:function(t){return c&&f.NEED&&u(t)&&!o(t,r)&&l(t),t}}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e){t.exports=!1},function(t,e,n){var r=n(83),i=n(60);t.exports=Object.keys||function(t){return r(t,i)}},function(t,e,n){var r=n(24),i=Math.max,o=Math.min;t.exports=function(t,e){return(t=r(t))<0?i(t+e,0):o(t,e)}},function(t,e,n){var r=n(4),i=n(84),o=n(60),a=n(59)("IE_PROTO"),s=function(){},u=function(){var t,e=n(56)("iframe"),r=o.length;for(e.style.display="none",n(62).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),u=t.F;r--;)delete u.prototype[o[r]];return u()};t.exports=Object.create||function(t,e){var n;return null!==t?(s.prototype=r(t),n=new s,s.prototype=null,n[a]=t):n=u(),void 0===e?n:i(n,e)}},function(t,e,n){var r=n(83),i=n(60).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,e,n){var r=n(12),i=n(15),o=n(59)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,e,n){var r=n(6).f,i=n(12),o=n(5)("toStringTag");t.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},function(t,e){t.exports={}},function(t,e,n){var r=n(5)("unscopables"),i=Array.prototype;null==i[r]&&n(13)(i,r,{}),t.exports=function(t){i[r][t]=!0}},function(t,e,n){"use strict";var r=n(2),i=n(6),o=n(7),a=n(5)("species");t.exports=function(t){var e=r[t];o&&e&&!e[a]&&i.f(e,a,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+": incorrect invocation!");return t}},function(t,e,n){var r=n(10);t.exports=function(t,e,n){for(var i in e)r(t,i,e[i],n);return t}},function(t,e,n){var r=n(3);t.exports=function(t,e){if(!r(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e,n){var r=n(22);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){var r=n(14),i=n(9),o=n(32);t.exports=function(t){return function(e,n,a){var s,u=r(e),c=i(u.length),l=o(a,c);if(t&&n!=n){for(;c>l;)if((s=u[l++])!=s)return!0}else for(;c>l;l++)if((t||l in u)&&u[l]===n)return t||l||0;return!t&&-1}}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(22),i=n(5)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:o?r(e):"Object"==(a=r(e))&&"function"==typeof e.callee?"Arguments":a}},function(t,e,n){var r=n(0),i=n(23),o=n(1),a=n(64),s="["+a+"]",u=RegExp("^"+s+s+"*"),c=RegExp(s+s+"*$"),l=function(t,e,n){var i={},s=o(function(){return!!a[t]()||"​"!="​"[t]()}),u=i[t]=s?e(f):a[t];n&&(i[n]=u),r(r.P+r.F*s,"String",i)},f=l.trim=function(t,e){return t=String(i(t)),1&e&&(t=t.replace(u,"")),2&e&&(t=t.replace(c,"")),t};t.exports=l},function(t,e,n){var r=n(5)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var o=[7],a=o[r]();a.next=function(){return{done:n=!0}},o[r]=function(){return a},t(o)}catch(t){}return n}},function(t,e,n){"use strict";var r=n(13),i=n(10),o=n(1),a=n(23),s=n(5);t.exports=function(t,e,n){var u=s(t),c=n(a,u,""[t]),l=c[0],f=c[1];o(function(){var e={};return e[u]=function(){return 7},7!=""[t](e)})&&(i(String.prototype,t,l),r(RegExp.prototype,u,2==e?function(t,e){return f.call(t,this,e)}:function(t){return f.call(t,this)}))}},function(t,e,n){var r=n(20),i=n(96),o=n(73),a=n(4),s=n(9),u=n(75),c={},l={};(e=t.exports=function(t,e,n,f,h){var v,d,p,y,g=h?function(){return t}:u(t),b=r(n,f,e?2:1),w=0;if("function"!=typeof g)throw TypeError(t+" is not iterable!");if(o(g)){for(v=s(t.length);v>w;w++)if((y=e?b(a(d=t[w])[0],d[1]):b(t[w]))===c||y===l)return y}else for(p=g.call(t);!(d=p.next()).done;)if((y=i(p,b,d.value,e))===c||y===l)return y}).BREAK=c,e.RETURN=l},function(t,e,n){var r=n(4),i=n(21),o=n(5)("species");t.exports=function(t,e){var n,a=r(t).constructor;return void 0===a||null==(n=r(a)[o])?e:i(n)}},function(t,e,n){var r=n(2).navigator;t.exports=r&&r.userAgent||""},function(t,e,n){"use strict";var r=n(2),i=n(0),o=n(10),a=n(41),s=n(27),u=n(51),c=n(40),l=n(3),f=n(1),h=n(49),v=n(36),d=n(65);t.exports=function(t,e,n,p,y,g){var b=r[t],w=b,x=y?"set":"add",m=w&&w.prototype,S={},M=function(t){var e=m[t];o(m,t,"delete"==t?function(t){return!(g&&!l(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(g&&!l(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return g&&!l(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,n){return e.call(this,0===t?0:t,n),this})};if("function"==typeof w&&(g||m.forEach&&!f(function(){(new w).entries().next()}))){var k=new w,P=k[x](g?{}:-0,1)!=k,D=f(function(){k.has(1)}),_=h(function(t){new w(t)}),E=!g&&f(function(){for(var t=new w,e=5;e--;)t[x](e,e);return!t.has(-0)});_||((w=e(function(e,n){c(e,w,t);var r=d(new b,e,w);return null!=n&&u(n,y,r[x],r),r})).prototype=m,m.constructor=w),(D||E)&&(M("delete"),M("has"),y&&M("get")),(E||P)&&M(x),g&&m.clear&&delete m.clear}else w=p.getConstructor(e,t,y,x),a(w.prototype,n),s.NEED=!0;return v(w,t),S[t]=w,i(i.G+i.W+i.F*(w!=b),S),g||p.setStrong(w,t,y),w}},function(t,e,n){for(var r,i=n(2),o=n(13),a=n(29),s=a("typed_array"),u=a("view"),c=!(!i.ArrayBuffer||!i.DataView),l=c,f=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(r=i[h[f++]])?(o(r.prototype,s,!0),o(r.prototype,u,!0)):l=!1;t.exports={ABV:c,CONSTR:l,TYPED:s,VIEW:u}},function(t,e,n){var r=n(3),i=n(2).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,e,n){var r=n(8),i=n(2),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(30)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(t,e,n){e.f=n(5)},function(t,e,n){var r=n(57)("keys"),i=n(29);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){var r=n(22);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(2).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(3),i=n(4),o=function(t,e){if(i(t),!r(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,r){try{(r=n(20)(Function.call,n(17).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return o(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:o}},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,n){var r=n(3),i=n(63).set;t.exports=function(t,e,n){var o,a=e.constructor;return a!==n&&"function"==typeof a&&(o=a.prototype)!==n.prototype&&r(o)&&i&&i(t,o),t}},function(t,e,n){"use strict";var r=n(24),i=n(23);t.exports=function(t){var e=String(i(this)),n="",o=r(t);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(e+=e))1&o&&(n+=e);return n}},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e){var n=Math.expm1;t.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:n},function(t,e,n){"use strict";var r=n(30),i=n(0),o=n(10),a=n(13),s=n(37),u=n(95),c=n(36),l=n(35),f=n(5)("iterator"),h=!([].keys&&"next"in[].keys()),v=function(){return this};t.exports=function(t,e,n,d,p,y,g){u(n,e,d);var b,w,x,m=function(t){if(!h&&t in P)return P[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},S=e+" Iterator",M="values"==p,k=!1,P=t.prototype,D=P[f]||P["@@iterator"]||p&&P[p],_=D||m(p),E=p?M?m("entries"):_:void 0,T="Array"==e&&P.entries||D;if(T&&(x=l(T.call(new t)))!==Object.prototype&&x.next&&(c(x,S,!0),r||"function"==typeof x[f]||a(x,f,v)),M&&D&&"values"!==D.name&&(k=!0,_=function(){return D.call(this)}),r&&!g||!h&&!k&&P[f]||a(P,f,_),s[e]=_,s[S]=v,p)if(b={values:M?_:m("values"),keys:y?_:m("keys"),entries:E},g)for(w in b)w in P||o(P,w,b[w]);else i(i.P+i.F*(h||k),e,b);return b}},function(t,e,n){var r=n(71),i=n(23);t.exports=function(t,e,n){if(r(e))throw TypeError("String#"+n+" doesn't accept regex!");return String(i(t))}},function(t,e,n){var r=n(3),i=n(22),o=n(5)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==i(t))}},function(t,e,n){var r=n(5)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,!"/./"[t](e)}catch(t){}}return!0}},function(t,e,n){var r=n(37),i=n(5)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,e,n){"use strict";var r=n(6),i=n(28);t.exports=function(t,e,n){e in t?r.f(t,e,i(0,n)):t[e]=n}},function(t,e,n){var r=n(47),i=n(5)("iterator"),o=n(37);t.exports=n(8).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,e,n){"use strict";var r=n(15),i=n(32),o=n(9);t.exports=function(t){for(var e=r(this),n=o(e.length),a=arguments.length,s=i(a>1?arguments[1]:void 0,n),u=a>2?arguments[2]:void 0,c=void 0===u?n:i(u,n);c>s;)e[s++]=t;return e}},function(t,e,n){"use strict";var r=n(38),i=n(99),o=n(37),a=n(14);t.exports=n(69)(Array,"Array",function(t,e){this._t=a(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,e,n){"use strict";var r=n(4);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,n){var r,i,o,a=n(20),s=n(88),u=n(62),c=n(56),l=n(2),f=l.process,h=l.setImmediate,v=l.clearImmediate,d=l.MessageChannel,p=l.Dispatch,y=0,g={},b=function(){var t=+this;if(g.hasOwnProperty(t)){var e=g[t];delete g[t],e()}},w=function(t){b.call(t.data)};h&&v||(h=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return g[++y]=function(){s("function"==typeof t?t:Function(t),e)},r(y),y},v=function(t){delete g[t]},"process"==n(22)(f)?r=function(t){f.nextTick(a(b,t,1))}:p&&p.now?r=function(t){p.now(a(b,t,1))}:d?(o=(i=new d).port2,i.port1.onmessage=w,r=a(o.postMessage,o,1)):l.addEventListener&&"function"==typeof postMessage&&!l.importScripts?(r=function(t){l.postMessage(t+"","*")},l.addEventListener("message",w,!1)):r="onreadystatechange"in c("script")?function(t){u.appendChild(c("script")).onreadystatechange=function(){u.removeChild(this),b.call(t)}}:function(t){setTimeout(a(b,t,1),0)}),t.exports={set:h,clear:v}},function(t,e,n){"use strict";var r=n(2),i=n(7),o=n(30),a=n(55),s=n(13),u=n(41),c=n(1),l=n(40),f=n(24),h=n(9),v=n(106),d=n(34).f,p=n(6).f,y=n(76),g=n(36),b="prototype",w="Wrong index!",x=r.ArrayBuffer,m=r.DataView,S=r.Math,M=r.RangeError,k=r.Infinity,P=x,D=S.abs,_=S.pow,E=S.floor,T=S.log,O=S.LN2,L=i?"_b":"buffer",A=i?"_l":"byteLength",F=i?"_o":"byteOffset";function N(t,e,n){var r,i,o,a=new Array(n),s=8*n-e-1,u=(1<<s)-1,c=u>>1,l=23===e?_(2,-24)-_(2,-77):0,f=0,h=t<0||0===t&&1/t<0?1:0;for((t=D(t))!=t||t===k?(i=t!=t?1:0,r=u):(r=E(T(t)/O),t*(o=_(2,-r))<1&&(r--,o*=2),(t+=r+c>=1?l/o:l*_(2,1-c))*o>=2&&(r++,o/=2),r+c>=u?(i=0,r=u):r+c>=1?(i=(t*o-1)*_(2,e),r+=c):(i=t*_(2,c-1)*_(2,e),r=0));e>=8;a[f++]=255&i,i/=256,e-=8);for(r=r<<e|i,s+=e;s>0;a[f++]=255&r,r/=256,s-=8);return a[--f]|=128*h,a}function R(t,e,n){var r,i=8*n-e-1,o=(1<<i)-1,a=o>>1,s=i-7,u=n-1,c=t[u--],l=127&c;for(c>>=7;s>0;l=256*l+t[u],u--,s-=8);for(r=l&(1<<-s)-1,l>>=-s,s+=e;s>0;r=256*r+t[u],u--,s-=8);if(0===l)l=1-a;else{if(l===o)return r?NaN:c?-k:k;r+=_(2,e),l-=a}return(c?-1:1)*r*_(2,l-e)}function G(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function C(t){return[255&t]}function j(t){return[255&t,t>>8&255]}function I(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function H(t){return N(t,52,8)}function V(t){return N(t,23,4)}function W(t,e,n){p(t[b],e,{get:function(){return this[n]}})}function U(t,e,n,r){var i=v(+n);if(i+e>t[A])throw M(w);var o=t[L]._b,a=i+t[F],s=o.slice(a,a+e);return r?s:s.reverse()}function Y(t,e,n,r,i,o){var a=v(+n);if(a+e>t[A])throw M(w);for(var s=t[L]._b,u=a+t[F],c=r(+i),l=0;l<e;l++)s[u+l]=c[o?l:e-l-1]}if(a.ABV){if(!c(function(){x(1)})||!c(function(){new x(-1)})||c(function(){return new x,new x(1.5),new x(NaN),"ArrayBuffer"!=x.name})){for(var B,X=(x=function(t){return l(this,x),new P(v(t))})[b]=P[b],z=d(P),q=0;z.length>q;)(B=z[q++])in x||s(x,B,P[B]);o||(X.constructor=x)}var K=new m(new x(2)),J=m[b].setInt8;K.setInt8(0,2147483648),K.setInt8(1,2147483649),!K.getInt8(0)&&K.getInt8(1)||u(m[b],{setInt8:function(t,e){J.call(this,t,e<<24>>24)},setUint8:function(t,e){J.call(this,t,e<<24>>24)}},!0)}else x=function(t){l(this,x,"ArrayBuffer");var e=v(t);this._b=y.call(new Array(e),0),this[A]=e},m=function(t,e,n){l(this,m,"DataView"),l(t,x,"DataView");var r=t[A],i=f(e);if(i<0||i>r)throw M("Wrong offset!");if(i+(n=void 0===n?r-i:h(n))>r)throw M("Wrong length!");this[L]=t,this[F]=i,this[A]=n},i&&(W(x,"byteLength","_l"),W(m,"buffer","_b"),W(m,"byteLength","_l"),W(m,"byteOffset","_o")),u(m[b],{getInt8:function(t){return U(this,1,t)[0]<<24>>24},getUint8:function(t){return U(this,1,t)[0]},getInt16:function(t){var e=U(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=U(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return G(U(this,4,t,arguments[1]))},getUint32:function(t){return G(U(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return R(U(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return R(U(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){Y(this,1,t,C,e)},setUint8:function(t,e){Y(this,1,t,C,e)},setInt16:function(t,e){Y(this,2,t,j,e,arguments[2])},setUint16:function(t,e){Y(this,2,t,j,e,arguments[2])},setInt32:function(t,e){Y(this,4,t,I,e,arguments[2])},setUint32:function(t,e){Y(this,4,t,I,e,arguments[2])},setFloat32:function(t,e){Y(this,4,t,V,e,arguments[2])},setFloat64:function(t,e){Y(this,8,t,H,e,arguments[2])}});g(x,"ArrayBuffer"),g(m,"DataView"),s(m[b],a.VIEW,!0),e.ArrayBuffer=x,e.DataView=m},function(t,e,n){t.exports=!n(7)&&!n(1)(function(){return 7!=Object.defineProperty(n(56)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(2),i=n(8),o=n(30),a=n(58),s=n(6).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||s(e,t,{value:a.f(t)})}},function(t,e,n){var r=n(12),i=n(14),o=n(45)(!1),a=n(59)("IE_PROTO");t.exports=function(t,e){var n,s=i(t),u=0,c=[];for(n in s)n!=a&&r(s,n)&&c.push(n);for(;e.length>u;)r(s,n=e[u++])&&(~o(c,n)||c.push(n));return c}},function(t,e,n){var r=n(6),i=n(4),o=n(31);t.exports=n(7)?Object.defineProperties:function(t,e){i(t);for(var n,a=o(e),s=a.length,u=0;s>u;)r.f(t,n=a[u++],e[n]);return t}},function(t,e,n){var r=n(14),i=n(34).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return a.slice()}}(t):i(r(t))}},function(t,e,n){"use strict";var r=n(31),i=n(46),o=n(44),a=n(15),s=n(43),u=Object.assign;t.exports=!u||n(1)(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=u({},t)[n]||Object.keys(u({},e)).join("")!=r})?function(t,e){for(var n=a(t),u=arguments.length,c=1,l=i.f,f=o.f;u>c;)for(var h,v=s(arguments[c++]),d=l?r(v).concat(l(v)):r(v),p=d.length,y=0;p>y;)f.call(v,h=d[y++])&&(n[h]=v[h]);return n}:u},function(t,e,n){"use strict";var r=n(21),i=n(3),o=n(88),a=[].slice,s={};t.exports=Function.bind||function(t){var e=r(this),n=a.call(arguments,1),u=function(){var r=n.concat(a.call(arguments));return this instanceof u?function(t,e,n){if(!(e in s)){for(var r=[],i=0;i<e;i++)r[i]="a["+i+"]";s[e]=Function("F,a","return new F("+r.join(",")+")")}return s[e](t,n)}(e,r.length,r):o(e,r,t)};return i(e.prototype)&&(u.prototype=e.prototype),u}},function(t,e){t.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},function(t,e,n){var r=n(2).parseInt,i=n(48).trim,o=n(64),a=/^[-+]?0[xX]/;t.exports=8!==r(o+"08")||22!==r(o+"0x16")?function(t,e){var n=i(String(t),3);return r(n,e>>>0||(a.test(n)?16:10))}:r},function(t,e,n){var r=n(2).parseFloat,i=n(48).trim;t.exports=1/r(n(64)+"-0")!=-1/0?function(t){var e=i(String(t),3),n=r(e);return 0===n&&"-"==e.charAt(0)?-0:n}:r},function(t,e,n){var r=n(22);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(e);return+t}},function(t,e,n){var r=n(3),i=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&i(t)===t}},function(t,e){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,e,n){var r=n(24),i=n(23);t.exports=function(t){return function(e,n){var o,a,s=String(i(e)),u=r(n),c=s.length;return u<0||u>=c?t?"":void 0:(o=s.charCodeAt(u))<55296||o>56319||u+1===c||(a=s.charCodeAt(u+1))<56320||a>57343?t?s.charAt(u):o:t?s.slice(u,u+2):a-56320+(o-55296<<10)+65536}}},function(t,e,n){"use strict";var r=n(33),i=n(28),o=n(36),a={};n(13)(a,n(5)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(a,{next:i(1,n)}),o(t,e+" Iterator")}},function(t,e,n){var r=n(4);t.exports=function(t,e,n,i){try{return i?e(r(n)[0],n[1]):e(n)}catch(e){var o=t.return;throw void 0!==o&&r(o.call(t)),e}}},function(t,e,n){var r=n(21),i=n(15),o=n(43),a=n(9);t.exports=function(t,e,n,s,u){r(e);var c=i(t),l=o(c),f=a(c.length),h=u?f-1:0,v=u?-1:1;if(n<2)for(;;){if(h in l){s=l[h],h+=v;break}if(h+=v,u?h<0:f<=h)throw TypeError("Reduce of empty array with no initial value")}for(;u?h>=0:f>h;h+=v)h in l&&(s=e(s,l[h],h,c));return s}},function(t,e,n){"use strict";var r=n(15),i=n(32),o=n(9);t.exports=[].copyWithin||function(t,e){var n=r(this),a=o(n.length),s=i(t,a),u=i(e,a),c=arguments.length>2?arguments[2]:void 0,l=Math.min((void 0===c?a:i(c,a))-u,a-s),f=1;for(u<s&&s<u+l&&(f=-1,u+=l-1,s+=l-1);l-- >0;)u in n?n[s]=n[u]:delete n[s],s+=f,u+=f;return n}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){n(7)&&"g"!=/./g.flags&&n(6).f(RegExp.prototype,"flags",{configurable:!0,get:n(78)})},function(t,e,n){"use strict";var r,i,o,a,s=n(30),u=n(2),c=n(20),l=n(47),f=n(0),h=n(3),v=n(21),d=n(40),p=n(51),y=n(52),g=n(79).set,b=n(227)(),w=n(102),x=n(228),m=n(53),S=n(103),M=u.TypeError,k=u.process,P=k&&k.versions,D=P&&P.v8||"",_=u.Promise,E="process"==l(k),T=function(){},O=i=w.f,L=!!function(){try{var t=_.resolve(1),e=(t.constructor={})[n(5)("species")]=function(t){t(T,T)};return(E||"function"==typeof PromiseRejectionEvent)&&t.then(T)instanceof e&&0!==D.indexOf("6.6")&&-1===m.indexOf("Chrome/66")}catch(t){}}(),A=function(t){var e;return!(!h(t)||"function"!=typeof(e=t.then))&&e},F=function(t,e){if(!t._n){t._n=!0;var n=t._c;b(function(){for(var r=t._v,i=1==t._s,o=0,a=function(e){var n,o,a,s=i?e.ok:e.fail,u=e.resolve,c=e.reject,l=e.domain;try{s?(i||(2==t._h&&G(t),t._h=1),!0===s?n=r:(l&&l.enter(),n=s(r),l&&(l.exit(),a=!0)),n===e.promise?c(M("Promise-chain cycle")):(o=A(n))?o.call(n,u,c):u(n)):c(r)}catch(t){l&&!a&&l.exit(),c(t)}};n.length>o;)a(n[o++]);t._c=[],t._n=!1,e&&!t._h&&N(t)})}},N=function(t){g.call(u,function(){var e,n,r,i=t._v,o=R(t);if(o&&(e=x(function(){E?k.emit("unhandledRejection",i,t):(n=u.onunhandledrejection)?n({promise:t,reason:i}):(r=u.console)&&r.error&&r.error("Unhandled promise rejection",i)}),t._h=E||R(t)?2:1),t._a=void 0,o&&e.e)throw e.v})},R=function(t){return 1!==t._h&&0===(t._a||t._c).length},G=function(t){g.call(u,function(){var e;E?k.emit("rejectionHandled",t):(e=u.onrejectionhandled)&&e({promise:t,reason:t._v})})},C=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),F(e,!0))},j=function(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw M("Promise can't be resolved itself");(e=A(t))?b(function(){var r={_w:n,_d:!1};try{e.call(t,c(j,r,1),c(C,r,1))}catch(t){C.call(r,t)}}):(n._v=t,n._s=1,F(n,!1))}catch(t){C.call({_w:n,_d:!1},t)}}};L||(_=function(t){d(this,_,"Promise","_h"),v(t),r.call(this);try{t(c(j,this,1),c(C,this,1))}catch(t){C.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(41)(_.prototype,{then:function(t,e){var n=O(y(this,_));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=E?k.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&F(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r;this.promise=t,this.resolve=c(j,t,1),this.reject=c(C,t,1)},w.f=O=function(t){return t===_||t===a?new o(t):i(t)}),f(f.G+f.W+f.F*!L,{Promise:_}),n(36)(_,"Promise"),n(39)("Promise"),a=n(8).Promise,f(f.S+f.F*!L,"Promise",{reject:function(t){var e=O(this);return(0,e.reject)(t),e.promise}}),f(f.S+f.F*(s||!L),"Promise",{resolve:function(t){return S(s&&this===a?_:this,t)}}),f(f.S+f.F*!(L&&n(49)(function(t){_.all(t).catch(T)})),"Promise",{all:function(t){var e=this,n=O(e),r=n.resolve,i=n.reject,o=x(function(){var n=[],o=0,a=1;p(t,!1,function(t){var s=o++,u=!1;n.push(void 0),a++,e.resolve(t).then(function(t){u||(u=!0,n[s]=t,--a||r(n))},i)}),--a||r(n)});return o.e&&i(o.v),n.promise},race:function(t){var e=this,n=O(e),r=n.reject,i=x(function(){p(t,!1,function(t){e.resolve(t).then(n.resolve,r)})});return i.e&&r(i.v),n.promise}})},function(t,e,n){"use strict";var r=n(21);function i(t){var e,n;this.promise=new t(function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r}),this.resolve=r(e),this.reject=r(n)}t.exports.f=function(t){return new i(t)}},function(t,e,n){var r=n(4),i=n(3),o=n(102);t.exports=function(t,e){if(r(t),i(e)&&e.constructor===t)return e;var n=o.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){"use strict";var r=n(6).f,i=n(33),o=n(41),a=n(20),s=n(40),u=n(51),c=n(69),l=n(99),f=n(39),h=n(7),v=n(27).fastKey,d=n(42),p=h?"_s":"size",y=function(t,e){var n,r=v(e);if("F"!==r)return t._i[r];for(n=t._f;n;n=n.n)if(n.k==e)return n};t.exports={getConstructor:function(t,e,n,c){var l=t(function(t,r){s(t,l,e,"_i"),t._t=e,t._i=i(null),t._f=void 0,t._l=void 0,t[p]=0,null!=r&&u(r,n,t[c],t)});return o(l.prototype,{clear:function(){for(var t=d(this,e),n=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];t._f=t._l=void 0,t[p]=0},delete:function(t){var n=d(this,e),r=y(n,t);if(r){var i=r.n,o=r.p;delete n._i[r.i],r.r=!0,o&&(o.n=i),i&&(i.p=o),n._f==r&&(n._f=i),n._l==r&&(n._l=o),n[p]--}return!!r},forEach:function(t){d(this,e);for(var n,r=a(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(t){return!!y(d(this,e),t)}}),h&&r(l.prototype,"size",{get:function(){return d(this,e)[p]}}),l},def:function(t,e,n){var r,i,o=y(t,e);return o?o.v=n:(t._l=o={i:i=v(e,!0),k:e,v:n,p:r=t._l,n:void 0,r:!1},t._f||(t._f=o),r&&(r.n=o),t[p]++,"F"!==i&&(t._i[i]=o)),t},getEntry:y,setStrong:function(t,e,n){c(t,e,function(t,n){this._t=d(t,e),this._k=n,this._l=void 0},function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?l(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,l(1))},n?"entries":"values",!n,!0),f(e)}}},function(t,e,n){"use strict";var r=n(41),i=n(27).getWeak,o=n(4),a=n(3),s=n(40),u=n(51),c=n(19),l=n(12),f=n(42),h=c(5),v=c(6),d=0,p=function(t){return t._l||(t._l=new y)},y=function(){this.a=[]},g=function(t,e){return h(t.a,function(t){return t[0]===e})};y.prototype={get:function(t){var e=g(this,t);if(e)return e[1]},has:function(t){return!!g(this,t)},set:function(t,e){var n=g(this,t);n?n[1]=e:this.a.push([t,e])},delete:function(t){var e=v(this.a,function(e){return e[0]===t});return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,n,o){var c=t(function(t,r){s(t,c,e,"_i"),t._t=e,t._i=d++,t._l=void 0,null!=r&&u(r,n,t[o],t)});return r(c.prototype,{delete:function(t){if(!a(t))return!1;var n=i(t);return!0===n?p(f(this,e)).delete(t):n&&l(n,this._i)&&delete n[this._i]},has:function(t){if(!a(t))return!1;var n=i(t);return!0===n?p(f(this,e)).has(t):n&&l(n,this._i)}}),c},def:function(t,e,n){var r=i(o(e),!0);return!0===r?p(t).set(e,n):r[t._i]=n,t},ufstore:p}},function(t,e,n){var r=n(24),i=n(9);t.exports=function(t){if(void 0===t)return 0;var e=r(t),n=i(e);if(e!==n)throw RangeError("Wrong length!");return n}},function(t,e,n){var r=n(34),i=n(46),o=n(4),a=n(2).Reflect;t.exports=a&&a.ownKeys||function(t){var e=r.f(o(t)),n=i.f;return n?e.concat(n(t)):e}},function(t,e,n){var r=n(9),i=n(66),o=n(23);t.exports=function(t,e,n,a){var s=String(o(t)),u=s.length,c=void 0===n?" ":String(n),l=r(e);if(l<=u||""==c)return s;var f=l-u,h=i.call(c,Math.ceil(f/c.length));return h.length>f&&(h=h.slice(0,f)),a?h+s:s+h}},function(t,e,n){var r=n(31),i=n(14),o=n(44).f;t.exports=function(t){return function(e){for(var n,a=i(e),s=r(a),u=s.length,c=0,l=[];u>c;)o.call(a,n=s[c++])&&l.push(t?[n,a[n]]:a[n]);return l}}},function(t,e,n){t.exports=function(){return new Worker(n.p+"plottadraw.js")}},function(t,e,n){n(112),t.exports=n(281)},function(t,e,n){"use strict";(function(t){n(114),n(258),n(260),n(262),n(264),n(266),n(268),n(270),n(272),n(274),n(278),t._babelPolyfill&&"undefined"!=typeof console&&console.warn&&console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."),t._babelPolyfill=!0}).call(this,n(113))},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){n(115),n(117),n(118),n(119),n(120),n(121),n(122),n(123),n(124),n(125),n(126),n(127),n(128),n(129),n(130),n(131),n(133),n(134),n(135),n(136),n(137),n(138),n(139),n(140),n(141),n(142),n(143),n(144),n(145),n(146),n(147),n(148),n(149),n(150),n(151),n(152),n(153),n(154),n(155),n(156),n(157),n(158),n(159),n(161),n(162),n(163),n(164),n(165),n(166),n(167),n(168),n(169),n(170),n(171),n(172),n(173),n(174),n(175),n(176),n(177),n(178),n(179),n(180),n(181),n(182),n(183),n(184),n(185),n(186),n(187),n(188),n(189),n(190),n(191),n(192),n(193),n(194),n(196),n(197),n(199),n(200),n(201),n(202),n(203),n(204),n(205),n(208),n(209),n(210),n(211),n(212),n(213),n(214),n(215),n(216),n(217),n(218),n(219),n(220),n(77),n(221),n(222),n(100),n(223),n(224),n(225),n(226),n(101),n(229),n(230),n(231),n(232),n(233),n(234),n(235),n(236),n(237),n(238),n(239),n(240),n(241),n(242),n(243),n(244),n(245),n(246),n(247),n(248),n(249),n(250),n(251),n(252),n(253),n(254),n(255),n(256),n(257),t.exports=n(8)},function(t,e,n){"use strict";var r=n(2),i=n(12),o=n(7),a=n(0),s=n(10),u=n(27).KEY,c=n(1),l=n(57),f=n(36),h=n(29),v=n(5),d=n(58),p=n(82),y=n(116),g=n(61),b=n(4),w=n(3),x=n(14),m=n(26),S=n(28),M=n(33),k=n(85),P=n(17),D=n(6),_=n(31),E=P.f,T=D.f,O=k.f,L=r.Symbol,A=r.JSON,F=A&&A.stringify,N=v("_hidden"),R=v("toPrimitive"),G={}.propertyIsEnumerable,C=l("symbol-registry"),j=l("symbols"),I=l("op-symbols"),H=Object.prototype,V="function"==typeof L,W=r.QObject,U=!W||!W.prototype||!W.prototype.findChild,Y=o&&c(function(){return 7!=M(T({},"a",{get:function(){return T(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=E(H,e);r&&delete H[e],T(t,e,n),r&&t!==H&&T(H,e,r)}:T,B=function(t){var e=j[t]=M(L.prototype);return e._k=t,e},X=V&&"symbol"==typeof L.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof L},z=function(t,e,n){return t===H&&z(I,e,n),b(t),e=m(e,!0),b(n),i(j,e)?(n.enumerable?(i(t,N)&&t[N][e]&&(t[N][e]=!1),n=M(n,{enumerable:S(0,!1)})):(i(t,N)||T(t,N,S(1,{})),t[N][e]=!0),Y(t,e,n)):T(t,e,n)},q=function(t,e){b(t);for(var n,r=y(e=x(e)),i=0,o=r.length;o>i;)z(t,n=r[i++],e[n]);return t},K=function(t){var e=G.call(this,t=m(t,!0));return!(this===H&&i(j,t)&&!i(I,t))&&(!(e||!i(this,t)||!i(j,t)||i(this,N)&&this[N][t])||e)},J=function(t,e){if(t=x(t),e=m(e,!0),t!==H||!i(j,e)||i(I,e)){var n=E(t,e);return!n||!i(j,e)||i(t,N)&&t[N][e]||(n.enumerable=!0),n}},Z=function(t){for(var e,n=O(x(t)),r=[],o=0;n.length>o;)i(j,e=n[o++])||e==N||e==u||r.push(e);return r},$=function(t){for(var e,n=t===H,r=O(n?I:x(t)),o=[],a=0;r.length>a;)!i(j,e=r[a++])||n&&!i(H,e)||o.push(j[e]);return o};V||(s((L=function(){if(this instanceof L)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),e=function(n){this===H&&e.call(I,n),i(this,N)&&i(this[N],t)&&(this[N][t]=!1),Y(this,t,S(1,n))};return o&&U&&Y(H,t,{configurable:!0,set:e}),B(t)}).prototype,"toString",function(){return this._k}),P.f=J,D.f=z,n(34).f=k.f=Z,n(44).f=K,n(46).f=$,o&&!n(30)&&s(H,"propertyIsEnumerable",K,!0),d.f=function(t){return B(v(t))}),a(a.G+a.W+a.F*!V,{Symbol:L});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Q.length>tt;)v(Q[tt++]);for(var et=_(v.store),nt=0;et.length>nt;)p(et[nt++]);a(a.S+a.F*!V,"Symbol",{for:function(t){return i(C,t+="")?C[t]:C[t]=L(t)},keyFor:function(t){if(!X(t))throw TypeError(t+" is not a symbol!");for(var e in C)if(C[e]===t)return e},useSetter:function(){U=!0},useSimple:function(){U=!1}}),a(a.S+a.F*!V,"Object",{create:function(t,e){return void 0===e?M(t):q(M(t),e)},defineProperty:z,defineProperties:q,getOwnPropertyDescriptor:J,getOwnPropertyNames:Z,getOwnPropertySymbols:$}),A&&a(a.S+a.F*(!V||c(function(){var t=L();return"[null]"!=F([t])||"{}"!=F({a:t})||"{}"!=F(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=e=r[1],(w(e)||void 0!==t)&&!X(t))return g(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!X(e))return e}),r[1]=e,F.apply(A,r)}}),L.prototype[R]||n(13)(L.prototype,R,L.prototype.valueOf),f(L,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(t,e,n){var r=n(31),i=n(46),o=n(44);t.exports=function(t){var e=r(t),n=i.f;if(n)for(var a,s=n(t),u=o.f,c=0;s.length>c;)u.call(t,a=s[c++])&&e.push(a);return e}},function(t,e,n){var r=n(0);r(r.S,"Object",{create:n(33)})},function(t,e,n){var r=n(0);r(r.S+r.F*!n(7),"Object",{defineProperty:n(6).f})},function(t,e,n){var r=n(0);r(r.S+r.F*!n(7),"Object",{defineProperties:n(84)})},function(t,e,n){var r=n(14),i=n(17).f;n(18)("getOwnPropertyDescriptor",function(){return function(t,e){return i(r(t),e)}})},function(t,e,n){var r=n(15),i=n(35);n(18)("getPrototypeOf",function(){return function(t){return i(r(t))}})},function(t,e,n){var r=n(15),i=n(31);n(18)("keys",function(){return function(t){return i(r(t))}})},function(t,e,n){n(18)("getOwnPropertyNames",function(){return n(85).f})},function(t,e,n){var r=n(3),i=n(27).onFreeze;n(18)("freeze",function(t){return function(e){return t&&r(e)?t(i(e)):e}})},function(t,e,n){var r=n(3),i=n(27).onFreeze;n(18)("seal",function(t){return function(e){return t&&r(e)?t(i(e)):e}})},function(t,e,n){var r=n(3),i=n(27).onFreeze;n(18)("preventExtensions",function(t){return function(e){return t&&r(e)?t(i(e)):e}})},function(t,e,n){var r=n(3);n(18)("isFrozen",function(t){return function(e){return!r(e)||!!t&&t(e)}})},function(t,e,n){var r=n(3);n(18)("isSealed",function(t){return function(e){return!r(e)||!!t&&t(e)}})},function(t,e,n){var r=n(3);n(18)("isExtensible",function(t){return function(e){return!!r(e)&&(!t||t(e))}})},function(t,e,n){var r=n(0);r(r.S+r.F,"Object",{assign:n(86)})},function(t,e,n){var r=n(0);r(r.S,"Object",{is:n(132)})},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,n){var r=n(0);r(r.S,"Object",{setPrototypeOf:n(63).set})},function(t,e,n){"use strict";var r=n(47),i={};i[n(5)("toStringTag")]="z",i+""!="[object z]"&&n(10)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,e,n){var r=n(0);r(r.P,"Function",{bind:n(87)})},function(t,e,n){var r=n(6).f,i=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in i||n(7)&&r(i,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},function(t,e,n){"use strict";var r=n(3),i=n(35),o=n(5)("hasInstance"),a=Function.prototype;o in a||n(6).f(a,o,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},function(t,e,n){var r=n(0),i=n(89);r(r.G+r.F*(parseInt!=i),{parseInt:i})},function(t,e,n){var r=n(0),i=n(90);r(r.G+r.F*(parseFloat!=i),{parseFloat:i})},function(t,e,n){"use strict";var r=n(2),i=n(12),o=n(22),a=n(65),s=n(26),u=n(1),c=n(34).f,l=n(17).f,f=n(6).f,h=n(48).trim,v=r.Number,d=v,p=v.prototype,y="Number"==o(n(33)(p)),g="trim"in String.prototype,b=function(t){var e=s(t,!1);if("string"==typeof e&&e.length>2){var n,r,i,o=(e=g?e.trim():h(e,3)).charCodeAt(0);if(43===o||45===o){if(88===(n=e.charCodeAt(2))||120===n)return NaN}else if(48===o){switch(e.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+e}for(var a,u=e.slice(2),c=0,l=u.length;c<l;c++)if((a=u.charCodeAt(c))<48||a>i)return NaN;return parseInt(u,r)}}return+e};if(!v(" 0o1")||!v("0b1")||v("+0x1")){v=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof v&&(y?u(function(){p.valueOf.call(n)}):"Number"!=o(n))?a(new d(b(e)),n,v):b(e)};for(var w,x=n(7)?c(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),m=0;x.length>m;m++)i(d,w=x[m])&&!i(v,w)&&f(v,w,l(d,w));v.prototype=p,p.constructor=v,n(10)(r,"Number",v)}},function(t,e,n){"use strict";var r=n(0),i=n(24),o=n(91),a=n(66),s=1..toFixed,u=Math.floor,c=[0,0,0,0,0,0],l="Number.toFixed: incorrect invocation!",f=function(t,e){for(var n=-1,r=e;++n<6;)r+=t*c[n],c[n]=r%1e7,r=u(r/1e7)},h=function(t){for(var e=6,n=0;--e>=0;)n+=c[e],c[e]=u(n/t),n=n%t*1e7},v=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==c[t]){var n=String(c[t]);e=""===e?n:e+a.call("0",7-n.length)+n}return e},d=function(t,e,n){return 0===e?n:e%2==1?d(t,e-1,n*t):d(t*t,e/2,n)};r(r.P+r.F*(!!s&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(1)(function(){s.call({})})),"Number",{toFixed:function(t){var e,n,r,s,u=o(this,l),c=i(t),p="",y="0";if(c<0||c>20)throw RangeError(l);if(u!=u)return"NaN";if(u<=-1e21||u>=1e21)return String(u);if(u<0&&(p="-",u=-u),u>1e-21)if(n=(e=function(t){for(var e=0,n=t;n>=4096;)e+=12,n/=4096;for(;n>=2;)e+=1,n/=2;return e}(u*d(2,69,1))-69)<0?u*d(2,-e,1):u/d(2,e,1),n*=4503599627370496,(e=52-e)>0){for(f(0,n),r=c;r>=7;)f(1e7,0),r-=7;for(f(d(10,r,1),0),r=e-1;r>=23;)h(1<<23),r-=23;h(1<<r),f(1,1),h(2),y=v()}else f(0,n),f(1<<-e,0),y=v()+a.call("0",c);return y=c>0?p+((s=y.length)<=c?"0."+a.call("0",c-s)+y:y.slice(0,s-c)+"."+y.slice(s-c)):p+y}})},function(t,e,n){"use strict";var r=n(0),i=n(1),o=n(91),a=1..toPrecision;r(r.P+r.F*(i(function(){return"1"!==a.call(1,void 0)})||!i(function(){a.call({})})),"Number",{toPrecision:function(t){var e=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?a.call(e):a.call(e,t)}})},function(t,e,n){var r=n(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,e,n){var r=n(0),i=n(2).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},function(t,e,n){var r=n(0);r(r.S,"Number",{isInteger:n(92)})},function(t,e,n){var r=n(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,e,n){var r=n(0),i=n(92),o=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},function(t,e,n){var r=n(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,n){var r=n(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,n){var r=n(0),i=n(90);r(r.S+r.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},function(t,e,n){var r=n(0),i=n(89);r(r.S+r.F*(Number.parseInt!=i),"Number",{parseInt:i})},function(t,e,n){var r=n(0),i=n(93),o=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+o(t-1)*o(t+1))}})},function(t,e,n){var r=n(0),i=Math.asinh;r(r.S+r.F*!(i&&1/i(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},function(t,e,n){var r=n(0),i=Math.atanh;r(r.S+r.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,e,n){var r=n(0),i=n(67);r(r.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,e,n){var r=n(0),i=Math.exp;r(r.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},function(t,e,n){var r=n(0),i=n(68);r(r.S+r.F*(i!=Math.expm1),"Math",{expm1:i})},function(t,e,n){var r=n(0);r(r.S,"Math",{fround:n(160)})},function(t,e,n){var r=n(67),i=Math.pow,o=i(2,-52),a=i(2,-23),s=i(2,127)*(2-a),u=i(2,-126);t.exports=Math.fround||function(t){var e,n,i=Math.abs(t),c=r(t);return i<u?c*(i/u/a+1/o-1/o)*u*a:(n=(e=(1+a/o)*i)-(e-i))>s||n!=n?c*(1/0):c*n}},function(t,e,n){var r=n(0),i=Math.abs;r(r.S,"Math",{hypot:function(t,e){for(var n,r,o=0,a=0,s=arguments.length,u=0;a<s;)u<(n=i(arguments[a++]))?(o=o*(r=u/n)*r+1,u=n):o+=n>0?(r=n/u)*r:n;return u===1/0?1/0:u*Math.sqrt(o)}})},function(t,e,n){var r=n(0),i=Math.imul;r(r.S+r.F*n(1)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function(t,e){var n=+t,r=+e,i=65535&n,o=65535&r;return 0|i*o+((65535&n>>>16)*o+i*(65535&r>>>16)<<16>>>0)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,e,n){var r=n(0);r(r.S,"Math",{log1p:n(93)})},function(t,e,n){var r=n(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,e,n){var r=n(0);r(r.S,"Math",{sign:n(67)})},function(t,e,n){var r=n(0),i=n(68),o=Math.exp;r(r.S+r.F*n(1)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},function(t,e,n){var r=n(0),i=n(68),o=Math.exp;r(r.S,"Math",{tanh:function(t){var e=i(t=+t),n=i(-t);return e==1/0?1:n==1/0?-1:(e-n)/(o(t)+o(-t))}})},function(t,e,n){var r=n(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,e,n){var r=n(0),i=n(32),o=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(t){for(var e,n=[],r=arguments.length,a=0;r>a;){if(e=+arguments[a++],i(e,1114111)!==e)throw RangeError(e+" is not a valid code point");n.push(e<65536?o(e):o(55296+((e-=65536)>>10),e%1024+56320))}return n.join("")}})},function(t,e,n){var r=n(0),i=n(14),o=n(9);r(r.S,"String",{raw:function(t){for(var e=i(t.raw),n=o(e.length),r=arguments.length,a=[],s=0;n>s;)a.push(String(e[s++])),s<r&&a.push(String(arguments[s]));return a.join("")}})},function(t,e,n){"use strict";n(48)("trim",function(t){return function(){return t(this,3)}})},function(t,e,n){"use strict";var r=n(94)(!0);n(69)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){"use strict";var r=n(0),i=n(94)(!1);r(r.P,"String",{codePointAt:function(t){return i(this,t)}})},function(t,e,n){"use strict";var r=n(0),i=n(9),o=n(70),a="".endsWith;r(r.P+r.F*n(72)("endsWith"),"String",{endsWith:function(t){var e=o(this,t,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=i(e.length),s=void 0===n?r:Math.min(i(n),r),u=String(t);return a?a.call(e,u,s):e.slice(s-u.length,s)===u}})},function(t,e,n){"use strict";var r=n(0),i=n(70);r(r.P+r.F*n(72)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){var r=n(0);r(r.P,"String",{repeat:n(66)})},function(t,e,n){"use strict";var r=n(0),i=n(9),o=n(70),a="".startsWith;r(r.P+r.F*n(72)("startsWith"),"String",{startsWith:function(t){var e=o(this,t,"startsWith"),n=i(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return a?a.call(e,r,n):e.slice(n,n+r.length)===r}})},function(t,e,n){"use strict";n(11)("anchor",function(t){return function(e){return t(this,"a","name",e)}})},function(t,e,n){"use strict";n(11)("big",function(t){return function(){return t(this,"big","","")}})},function(t,e,n){"use strict";n(11)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,e,n){"use strict";n(11)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,e,n){"use strict";n(11)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,e,n){"use strict";n(11)("fontcolor",function(t){return function(e){return t(this,"font","color",e)}})},function(t,e,n){"use strict";n(11)("fontsize",function(t){return function(e){return t(this,"font","size",e)}})},function(t,e,n){"use strict";n(11)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,e,n){"use strict";n(11)("link",function(t){return function(e){return t(this,"a","href",e)}})},function(t,e,n){"use strict";n(11)("small",function(t){return function(){return t(this,"small","","")}})},function(t,e,n){"use strict";n(11)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,e,n){"use strict";n(11)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,e,n){"use strict";n(11)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,e,n){var r=n(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,n){"use strict";var r=n(0),i=n(15),o=n(26);r(r.P+r.F*n(1)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var e=i(this),n=o(e);return"number"!=typeof n||isFinite(n)?e.toISOString():null}})},function(t,e,n){var r=n(0),i=n(195);r(r.P+r.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},function(t,e,n){"use strict";var r=n(1),i=Date.prototype.getTime,o=Date.prototype.toISOString,a=function(t){return t>9?t:"0"+t};t.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-5e13-1))})||!r(function(){o.call(new Date(NaN))})?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),n=t.getUTCMilliseconds(),r=e<0?"-":e>9999?"+":"";return r+("00000"+Math.abs(e)).slice(r?-6:-4)+"-"+a(t.getUTCMonth()+1)+"-"+a(t.getUTCDate())+"T"+a(t.getUTCHours())+":"+a(t.getUTCMinutes())+":"+a(t.getUTCSeconds())+"."+(n>99?n:"0"+a(n))+"Z"}:o},function(t,e,n){var r=Date.prototype,i=r.toString,o=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(10)(r,"toString",function(){var t=o.call(this);return t==t?i.call(this):"Invalid Date"})},function(t,e,n){var r=n(5)("toPrimitive"),i=Date.prototype;r in i||n(13)(i,r,n(198))},function(t,e,n){"use strict";var r=n(4),i=n(26);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(r(this),"number"!=t)}},function(t,e,n){var r=n(0);r(r.S,"Array",{isArray:n(61)})},function(t,e,n){"use strict";var r=n(20),i=n(0),o=n(15),a=n(96),s=n(73),u=n(9),c=n(74),l=n(75);i(i.S+i.F*!n(49)(function(t){Array.from(t)}),"Array",{from:function(t){var e,n,i,f,h=o(t),v="function"==typeof this?this:Array,d=arguments.length,p=d>1?arguments[1]:void 0,y=void 0!==p,g=0,b=l(h);if(y&&(p=r(p,d>2?arguments[2]:void 0,2)),null==b||v==Array&&s(b))for(n=new v(e=u(h.length));e>g;g++)c(n,g,y?p(h[g],g):h[g]);else for(f=b.call(h),n=new v;!(i=f.next()).done;g++)c(n,g,y?a(f,p,[i.value,g],!0):i.value);return n.length=g,n}})},function(t,e,n){"use strict";var r=n(0),i=n(74);r(r.S+r.F*n(1)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,e=arguments.length,n=new("function"==typeof this?this:Array)(e);e>t;)i(n,t,arguments[t++]);return n.length=e,n}})},function(t,e,n){"use strict";var r=n(0),i=n(14),o=[].join;r(r.P+r.F*(n(43)!=Object||!n(16)(o)),"Array",{join:function(t){return o.call(i(this),void 0===t?",":t)}})},function(t,e,n){"use strict";var r=n(0),i=n(62),o=n(22),a=n(32),s=n(9),u=[].slice;r(r.P+r.F*n(1)(function(){i&&u.call(i)}),"Array",{slice:function(t,e){var n=s(this.length),r=o(this);if(e=void 0===e?n:e,"Array"==r)return u.call(this,t,e);for(var i=a(t,n),c=a(e,n),l=s(c-i),f=new Array(l),h=0;h<l;h++)f[h]="String"==r?this.charAt(i+h):this[i+h];return f}})},function(t,e,n){"use strict";var r=n(0),i=n(21),o=n(15),a=n(1),s=[].sort,u=[1,2,3];r(r.P+r.F*(a(function(){u.sort(void 0)})||!a(function(){u.sort(null)})||!n(16)(s)),"Array",{sort:function(t){return void 0===t?s.call(o(this)):s.call(o(this),i(t))}})},function(t,e,n){"use strict";var r=n(0),i=n(19)(0),o=n(16)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,e,n){var r=n(207);t.exports=function(t,e){return new(r(t))(e)}},function(t,e,n){var r=n(3),i=n(61),o=n(5)("species");t.exports=function(t){var e;return i(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!i(e.prototype)||(e=void 0),r(e)&&null===(e=e[o])&&(e=void 0)),void 0===e?Array:e}},function(t,e,n){"use strict";var r=n(0),i=n(19)(1);r(r.P+r.F*!n(16)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),i=n(19)(2);r(r.P+r.F*!n(16)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),i=n(19)(3);r(r.P+r.F*!n(16)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),i=n(19)(4);r(r.P+r.F*!n(16)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),i=n(97);r(r.P+r.F*!n(16)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},function(t,e,n){"use strict";var r=n(0),i=n(97);r(r.P+r.F*!n(16)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},function(t,e,n){"use strict";var r=n(0),i=n(45)(!1),o=[].indexOf,a=!!o&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!n(16)(o)),"Array",{indexOf:function(t){return a?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),i=n(14),o=n(24),a=n(9),s=[].lastIndexOf,u=!!s&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(u||!n(16)(s)),"Array",{lastIndexOf:function(t){if(u)return s.apply(this,arguments)||0;var e=i(this),n=a(e.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,o(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in e&&e[r]===t)return r||0;return-1}})},function(t,e,n){var r=n(0);r(r.P,"Array",{copyWithin:n(98)}),n(38)("copyWithin")},function(t,e,n){var r=n(0);r(r.P,"Array",{fill:n(76)}),n(38)("fill")},function(t,e,n){"use strict";var r=n(0),i=n(19)(5),o=!0;"find"in[]&&Array(1).find(function(){o=!1}),r(r.P+r.F*o,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),n(38)("find")},function(t,e,n){"use strict";var r=n(0),i=n(19)(6),o="findIndex",a=!0;o in[]&&Array(1)[o](function(){a=!1}),r(r.P+r.F*a,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),n(38)(o)},function(t,e,n){n(39)("Array")},function(t,e,n){var r=n(2),i=n(65),o=n(6).f,a=n(34).f,s=n(71),u=n(78),c=r.RegExp,l=c,f=c.prototype,h=/a/g,v=/a/g,d=new c(h)!==h;if(n(7)&&(!d||n(1)(function(){return v[n(5)("match")]=!1,c(h)!=h||c(v)==v||"/a/i"!=c(h,"i")}))){c=function(t,e){var n=this instanceof c,r=s(t),o=void 0===e;return!n&&r&&t.constructor===c&&o?t:i(d?new l(r&&!o?t.source:t,e):l((r=t instanceof c)?t.source:t,r&&o?u.call(t):e),n?this:f,c)};for(var p=function(t){t in c||o(c,t,{configurable:!0,get:function(){return l[t]},set:function(e){l[t]=e}})},y=a(l),g=0;y.length>g;)p(y[g++]);f.constructor=c,c.prototype=f,n(10)(r,"RegExp",c)}n(39)("RegExp")},function(t,e,n){"use strict";n(100);var r=n(4),i=n(78),o=n(7),a=/./.toString,s=function(t){n(10)(RegExp.prototype,"toString",t,!0)};n(1)(function(){return"/a/b"!=a.call({source:"a",flags:"b"})})?s(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=a.name&&s(function(){return a.call(this)})},function(t,e,n){n(50)("match",1,function(t,e,n){return[function(n){"use strict";var r=t(this),i=null==n?void 0:n[e];return void 0!==i?i.call(n,r):new RegExp(n)[e](String(r))},n]})},function(t,e,n){n(50)("replace",2,function(t,e,n){return[function(r,i){"use strict";var o=t(this),a=null==r?void 0:r[e];return void 0!==a?a.call(r,o,i):n.call(String(o),r,i)},n]})},function(t,e,n){n(50)("search",1,function(t,e,n){return[function(n){"use strict";var r=t(this),i=null==n?void 0:n[e];return void 0!==i?i.call(n,r):new RegExp(n)[e](String(r))},n]})},function(t,e,n){n(50)("split",2,function(t,e,r){"use strict";var i=n(71),o=r,a=[].push;if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length){var s=void 0===/()??/.exec("")[1];r=function(t,e){var n=String(this);if(void 0===t&&0===e)return[];if(!i(t))return o.call(n,t,e);var r,u,c,l,f,h=[],v=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),d=0,p=void 0===e?4294967295:e>>>0,y=new RegExp(t.source,v+"g");for(s||(r=new RegExp("^"+y.source+"$(?!\\s)",v));(u=y.exec(n))&&!((c=u.index+u[0].length)>d&&(h.push(n.slice(d,u.index)),!s&&u.length>1&&u[0].replace(r,function(){for(f=1;f<arguments.length-2;f++)void 0===arguments[f]&&(u[f]=void 0)}),u.length>1&&u.index<n.length&&a.apply(h,u.slice(1)),l=u[0].length,d=c,h.length>=p));)y.lastIndex===u.index&&y.lastIndex++;return d===n.length?!l&&y.test("")||h.push(""):h.push(n.slice(d)),h.length>p?h.slice(0,p):h}}else"0".split(void 0,0).length&&(r=function(t,e){return void 0===t&&0===e?[]:o.call(this,t,e)});return[function(n,i){var o=t(this),a=null==n?void 0:n[e];return void 0!==a?a.call(n,o,i):r.call(String(o),n,i)},r]})},function(t,e,n){var r=n(2),i=n(79).set,o=r.MutationObserver||r.WebKitMutationObserver,a=r.process,s=r.Promise,u="process"==n(22)(a);t.exports=function(){var t,e,n,c=function(){var r,i;for(u&&(r=a.domain)&&r.exit();t;){i=t.fn,t=t.next;try{i()}catch(r){throw t?n():e=void 0,r}}e=void 0,r&&r.enter()};if(u)n=function(){a.nextTick(c)};else if(!o||r.navigator&&r.navigator.standalone)if(s&&s.resolve){var l=s.resolve(void 0);n=function(){l.then(c)}}else n=function(){i.call(r,c)};else{var f=!0,h=document.createTextNode("");new o(c).observe(h,{characterData:!0}),n=function(){h.data=f=!f}}return function(r){var i={fn:r,next:void 0};e&&(e.next=i),t||(t=i,n()),e=i}}},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,n){"use strict";var r=n(104),i=n(42);t.exports=n(54)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var e=r.getEntry(i(this,"Map"),t);return e&&e.v},set:function(t,e){return r.def(i(this,"Map"),0===t?0:t,e)}},r,!0)},function(t,e,n){"use strict";var r=n(104),i=n(42);t.exports=n(54)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"Set"),t=0===t?0:t,t)}},r)},function(t,e,n){"use strict";var r,i=n(19)(0),o=n(10),a=n(27),s=n(86),u=n(105),c=n(3),l=n(1),f=n(42),h=a.getWeak,v=Object.isExtensible,d=u.ufstore,p={},y=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},g={get:function(t){if(c(t)){var e=h(t);return!0===e?d(f(this,"WeakMap")).get(t):e?e[this._i]:void 0}},set:function(t,e){return u.def(f(this,"WeakMap"),t,e)}},b=t.exports=n(54)("WeakMap",y,g,u,!0,!0);l(function(){return 7!=(new b).set((Object.freeze||Object)(p),7).get(p)})&&(s((r=u.getConstructor(y,"WeakMap")).prototype,g),a.NEED=!0,i(["delete","has","get","set"],function(t){var e=b.prototype,n=e[t];o(e,t,function(e,i){if(c(e)&&!v(e)){this._f||(this._f=new r);var o=this._f[t](e,i);return"set"==t?this:o}return n.call(this,e,i)})}))},function(t,e,n){"use strict";var r=n(105),i=n(42);n(54)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"WeakSet"),t,!0)}},r,!1,!0)},function(t,e,n){"use strict";var r=n(0),i=n(55),o=n(80),a=n(4),s=n(32),u=n(9),c=n(3),l=n(2).ArrayBuffer,f=n(52),h=o.ArrayBuffer,v=o.DataView,d=i.ABV&&l.isView,p=h.prototype.slice,y=i.VIEW;r(r.G+r.W+r.F*(l!==h),{ArrayBuffer:h}),r(r.S+r.F*!i.CONSTR,"ArrayBuffer",{isView:function(t){return d&&d(t)||c(t)&&y in t}}),r(r.P+r.U+r.F*n(1)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,e){if(void 0!==p&&void 0===e)return p.call(a(this),t);for(var n=a(this).byteLength,r=s(t,n),i=s(void 0===e?n:e,n),o=new(f(this,h))(u(i-r)),c=new v(this),l=new v(o),d=0;r<i;)l.setUint8(d++,c.getUint8(r++));return o}}),n(39)("ArrayBuffer")},function(t,e,n){var r=n(0);r(r.G+r.W+r.F*!n(55).ABV,{DataView:n(80).DataView})},function(t,e,n){n(25)("Int8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(25)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(25)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}},!0)},function(t,e,n){n(25)("Int16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(25)("Uint16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(25)("Int32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(25)("Uint32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(25)("Float32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(25)("Float64",8,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){var r=n(0),i=n(21),o=n(4),a=(n(2).Reflect||{}).apply,s=Function.apply;r(r.S+r.F*!n(1)(function(){a(function(){})}),"Reflect",{apply:function(t,e,n){var r=i(t),u=o(n);return a?a(r,e,u):s.call(r,e,u)}})},function(t,e,n){var r=n(0),i=n(33),o=n(21),a=n(4),s=n(3),u=n(1),c=n(87),l=(n(2).Reflect||{}).construct,f=u(function(){function t(){}return!(l(function(){},[],t)instanceof t)}),h=!u(function(){l(function(){})});r(r.S+r.F*(f||h),"Reflect",{construct:function(t,e){o(t),a(e);var n=arguments.length<3?t:o(arguments[2]);if(h&&!f)return l(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(c.apply(t,r))}var u=n.prototype,v=i(s(u)?u:Object.prototype),d=Function.apply.call(t,v,e);return s(d)?d:v}})},function(t,e,n){var r=n(6),i=n(0),o=n(4),a=n(26);i(i.S+i.F*n(1)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,e,n){o(t),e=a(e,!0),o(n);try{return r.f(t,e,n),!0}catch(t){return!1}}})},function(t,e,n){var r=n(0),i=n(17).f,o=n(4);r(r.S,"Reflect",{deleteProperty:function(t,e){var n=i(o(t),e);return!(n&&!n.configurable)&&delete t[e]}})},function(t,e,n){"use strict";var r=n(0),i=n(4),o=function(t){this._t=i(t),this._i=0;var e,n=this._k=[];for(e in t)n.push(e)};n(95)(o,"Object",function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new o(t)}})},function(t,e,n){var r=n(17),i=n(35),o=n(12),a=n(0),s=n(3),u=n(4);a(a.S,"Reflect",{get:function t(e,n){var a,c,l=arguments.length<3?e:arguments[2];return u(e)===l?e[n]:(a=r.f(e,n))?o(a,"value")?a.value:void 0!==a.get?a.get.call(l):void 0:s(c=i(e))?t(c,n,l):void 0}})},function(t,e,n){var r=n(17),i=n(0),o=n(4);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return r.f(o(t),e)}})},function(t,e,n){var r=n(0),i=n(35),o=n(4);r(r.S,"Reflect",{getPrototypeOf:function(t){return i(o(t))}})},function(t,e,n){var r=n(0);r(r.S,"Reflect",{has:function(t,e){return e in t}})},function(t,e,n){var r=n(0),i=n(4),o=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return i(t),!o||o(t)}})},function(t,e,n){var r=n(0);r(r.S,"Reflect",{ownKeys:n(107)})},function(t,e,n){var r=n(0),i=n(4),o=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){i(t);try{return o&&o(t),!0}catch(t){return!1}}})},function(t,e,n){var r=n(6),i=n(17),o=n(35),a=n(12),s=n(0),u=n(28),c=n(4),l=n(3);s(s.S,"Reflect",{set:function t(e,n,s){var f,h,v=arguments.length<4?e:arguments[3],d=i.f(c(e),n);if(!d){if(l(h=o(e)))return t(h,n,s,v);d=u(0)}if(a(d,"value")){if(!1===d.writable||!l(v))return!1;if(f=i.f(v,n)){if(f.get||f.set||!1===f.writable)return!1;f.value=s,r.f(v,n,f)}else r.f(v,n,u(0,s));return!0}return void 0!==d.set&&(d.set.call(v,s),!0)}})},function(t,e,n){var r=n(0),i=n(63);i&&r(r.S,"Reflect",{setPrototypeOf:function(t,e){i.check(t,e);try{return i.set(t,e),!0}catch(t){return!1}}})},function(t,e,n){n(259),t.exports=n(8).Array.includes},function(t,e,n){"use strict";var r=n(0),i=n(45)(!0);r(r.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),n(38)("includes")},function(t,e,n){n(261),t.exports=n(8).String.padStart},function(t,e,n){"use strict";var r=n(0),i=n(108),o=n(53);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,e,n){n(263),t.exports=n(8).String.padEnd},function(t,e,n){"use strict";var r=n(0),i=n(108),o=n(53);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,e,n){n(265),t.exports=n(58).f("asyncIterator")},function(t,e,n){n(82)("asyncIterator")},function(t,e,n){n(267),t.exports=n(8).Object.getOwnPropertyDescriptors},function(t,e,n){var r=n(0),i=n(107),o=n(14),a=n(17),s=n(74);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,n,r=o(t),u=a.f,c=i(r),l={},f=0;c.length>f;)void 0!==(n=u(r,e=c[f++]))&&s(l,e,n);return l}})},function(t,e,n){n(269),t.exports=n(8).Object.values},function(t,e,n){var r=n(0),i=n(109)(!1);r(r.S,"Object",{values:function(t){return i(t)}})},function(t,e,n){n(271),t.exports=n(8).Object.entries},function(t,e,n){var r=n(0),i=n(109)(!0);r(r.S,"Object",{entries:function(t){return i(t)}})},function(t,e,n){"use strict";n(101),n(273),t.exports=n(8).Promise.finally},function(t,e,n){"use strict";var r=n(0),i=n(8),o=n(2),a=n(52),s=n(103);r(r.P+r.R,"Promise",{finally:function(t){var e=a(this,i.Promise||o.Promise),n="function"==typeof t;return this.then(n?function(n){return s(e,t()).then(function(){return n})}:t,n?function(n){return s(e,t()).then(function(){throw n})}:t)}})},function(t,e,n){n(275),n(276),n(277),t.exports=n(8)},function(t,e,n){var r=n(2),i=n(0),o=n(53),a=[].slice,s=/MSIE .\./.test(o),u=function(t){return function(e,n){var r=arguments.length>2,i=!!r&&a.call(arguments,2);return t(r?function(){("function"==typeof e?e:Function(e)).apply(this,i)}:e,n)}};i(i.G+i.B+i.F*s,{setTimeout:u(r.setTimeout),setInterval:u(r.setInterval)})},function(t,e,n){var r=n(0),i=n(79);r(r.G+r.B,{setImmediate:i.set,clearImmediate:i.clear})},function(t,e,n){for(var r=n(77),i=n(31),o=n(10),a=n(2),s=n(13),u=n(37),c=n(5),l=c("iterator"),f=c("toStringTag"),h=u.Array,v={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=i(v),p=0;p<d.length;p++){var y,g=d[p],b=v[g],w=a[g],x=w&&w.prototype;if(x&&(x[l]||s(x,l,h),x[f]||s(x,f,g),u[g]=h,b))for(y in r)x[y]||o(x,y,r[y],!0)}},function(t,e){!function(e){"use strict";var n,r=Object.prototype,i=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag",c="object"==typeof t,l=e.regeneratorRuntime;if(l)c&&(t.exports=l);else{(l=e.regeneratorRuntime=c?t.exports:{}).wrap=x;var f="suspendedStart",h="suspendedYield",v="executing",d="completed",p={},y={};y[a]=function(){return this};var g=Object.getPrototypeOf,b=g&&g(g(L([])));b&&b!==r&&i.call(b,a)&&(y=b);var w=k.prototype=S.prototype=Object.create(y);M.prototype=w.constructor=k,k.constructor=M,k[u]=M.displayName="GeneratorFunction",l.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===M||"GeneratorFunction"===(e.displayName||e.name))},l.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,k):(t.__proto__=k,u in t||(t[u]="GeneratorFunction")),t.prototype=Object.create(w),t},l.awrap=function(t){return{__await:t}},P(D.prototype),D.prototype[s]=function(){return this},l.AsyncIterator=D,l.async=function(t,e,n,r){var i=new D(x(t,e,n,r));return l.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},P(w),w[u]="Generator",w[a]=function(){return this},w.toString=function(){return"[object Generator]"},l.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},l.values=L,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(T),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,i){return s.type="throw",s.arg=t,e.next=r,i&&(e.method="next",e.arg=n),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],s=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var u=i.call(a,"catchLoc"),c=i.call(a,"finallyLoc");if(u&&c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,p):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),p},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),T(n),p}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;T(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:L(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),p}}}function x(t,e,n,r){var i=e&&e.prototype instanceof S?e:S,o=Object.create(i.prototype),a=new O(r||[]);return o._invoke=function(t,e,n){var r=f;return function(i,o){if(r===v)throw new Error("Generator is already running");if(r===d){if("throw"===i)throw o;return A()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var s=_(a,n);if(s){if(s===p)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=v;var u=m(t,e,n);if("normal"===u.type){if(r=n.done?d:h,u.arg===p)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=d,n.method="throw",n.arg=u.arg)}}}(t,n,a),o}function m(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function S(){}function M(){}function k(){}function P(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function D(t){var e;this._invoke=function(n,r){function o(){return new Promise(function(e,o){!function e(n,r,o,a){var s=m(t[n],t,r);if("throw"!==s.type){var u=s.arg,c=u.value;return c&&"object"==typeof c&&i.call(c,"__await")?Promise.resolve(c.__await).then(function(t){e("next",t,o,a)},function(t){e("throw",t,o,a)}):Promise.resolve(c).then(function(t){u.value=t,o(u)},function(t){return e("throw",t,o,a)})}a(s.arg)}(n,r,e,o)})}return e=e?e.then(o,o):o()}}function _(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,_(t,e),"throw"===e.method))return p;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return p}var i=m(r,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,p;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,p):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,p)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function L(t){if(t){var e=t[a];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,o=function e(){for(;++r<t.length;)if(i.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return o.next=o}}return{next:A}}function A(){return{value:n,done:!0}}}(function(){return this||"object"==typeof self&&self}()||Function("return this")())},,,function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}n.r(e);var i=function(t){return t&&"object"===r(t)},o=0,a=1,s=2,u=3,c=4,l=5,f=6,h=7,v=8,d=9,p=10,y=11,g=12,b=13,w=14,x=15,m=16,S=17,M=18,k=19,P=20,D=21,_=22,E=23,T=24,O=25,L=26;function A(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var F=function(){function t(e,n,r,o,a,s){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.visible="boolean"!=typeof e||e,this.type="string"==typeof n?n:"Number",this.label=r||"",this.color=o||"black",this.location=a||"center",this.range=i(s)&&"number"==typeof s.start&&"number"==typeof s.end?{start:s.start,end:s.end,value:Math.abs(s.end-s.start)}:{start:-1,end:1}}var e,n,r;return e=t,(n=[{key:"SetData",value:function(t,e,n,r,o,a){this.visible="boolean"==typeof t?t:this.visible,this.type=e||this.type,this.label=n||this.label,this.color=r||"black",this.location=o||"center",this.range=i(a)&&"number"==typeof a.start&&"number"==typeof a.end?{start:a.start,end:a.end,value:Math.abs(a.end-a.start)}:this.range}},{key:"SetVisible",value:function(t){this.visible="boolean"==typeof t?t:this.visible}},{key:"SetLabel",value:function(t){this.label=t||this.label}},{key:"SetColor",value:function(t){this.color=t||"black"}},{key:"SetLocation",value:function(t){this.location=t||"center"}},{key:"SetRange",value:function(t){this.range=i(t)&&"number"==typeof t.start&&"number"==typeof t.end?{start:t.start,end:t.end,value:Math.abs(t.end-t.start)}:this.range}},{key:"Start",get:function(){return this.range.start}},{key:"End",get:function(){return this.range.End}}])&&A(e.prototype,n),r&&A(e,r),t}();function N(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var R=function(){function t(e,n,r,o){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.type=e||"number",this.visible="boolean"!=typeof n||n,this.color=r||"black",this.value=i(o)&&o.x&&o.y?{x:o.x,y:o.y}:{x:1,y:1}}var e,n,r;return e=t,(n=[{key:"SetData",value:function(t,e,n,r){this.type=t||this.type,this.visible="boolean"==typeof e?e:this.visible,this.color=n||this.color,this.value=i(r)&&r.x&&r.y?{x:r.x,y:r.y}:this.value}},{key:"SetVisible",value:function(t){this.visible="boolean"==typeof t?t:this.visible}},{key:"SetColor",value:function(t){this.color=t||this.color}},{key:"SetValue",value:function(t){this.value=i(t)&&t.x&&t.y?{x:t.x,y:t.y}:this.value}}])&&N(e.prototype,n),r&&N(e,r),t}();function G(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var C,j,I,H,V,W,U,Y,B,X,z,q,K,J,Z,$,Q=(C=Symbol("Font"),j=Symbol("LegendVisible"),I=Symbol("Title"),H=Symbol("TitleColor"),V=Symbol("TitleLocation"),W=Symbol("GridType"),U=Symbol("GridVisible"),Y=Symbol("GridColor"),B=Symbol("BorderType"),X=Symbol("BorderVisible"),z=Symbol("BorderColor"),q=Symbol("BorderWidth"),K=Symbol("AxisX"),J=Symbol("AxisY"),Z=Symbol("Tics"),$=Symbol("TableVisible"),function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this[C]="'Helvetica Neue', Helvetica, Arial, sans-serif",this[j]=!0,this[I]="",this[H]="black",this[V]="center",this[U]=!0,this[W]="solid",this[Y]="black",this[X]=!0,this[B]="solid",this[z]="black",this[q]=.3,this[K]=new F,this[J]=new F,this[Z]=new R,this[$]=!0,this.Init(e)}var e,n,r;return e=t,(n=[{key:"Init",value:function(t){if(i(t)){if(this.font=t.font,this.legendVisible=t.legendVisible,i(t.title)&&(this.title=t.title.text,this.titleColor=t.title.color,this.titleLocation=t.title.location),i(t.grid)&&(this.gridType=t.grid.type,this.gridVisible=t.grid.visible,this.gridColor=t.grid.color),i(t.border)&&(this.borderType=t.border.type,this.borderVisible=t.border.visible,this.borderColor=t.border.color,this.borderWidth=t.border.width),i(t.axis)){if(i(t.axis.x)){var e=t.axis.x,n=e.visible,r=e.type,o=e.label,a=e.color,s=e.location,u=e.range;this.axisX?this.axisX.SetData(n,r,o,a,s,u):this.axisX=new F(n,r,o,a,s,u)}if(i(t.axis.y)){var c=t.axis.y,l=c.visible,f=c.label,h=c.color,v=c.location,d=c.range;this.axisY?this.axisY.SetData(l,"Number",f,h,v,d):this.axisY=new F(l,"Number",f,h,v,d)}}if(i(t.tics)){var p=t.tics,y=p.type,g=p.visible,b=p.color,w=p.value;this.tics?this.tics.SetData(y,g,b,w):this.tics=new R(y,g,b,w)}i(t.table)&&(t.table.visible,this.tableVisible=t.table.visible)}}},{key:"font",get:function(){return this[C]},set:function(t){t&&"string"==typeof t&&(this[C]=t)}},{key:"legendVisible",get:function(){return this[j]},set:function(t){"boolean"==typeof t&&(this[j]=t)}},{key:"title",get:function(){return this[I]},set:function(t){t&&"string"==typeof t&&(this[I]=t)}},{key:"titleColor",get:function(){return this[H]},set:function(t){t&&"string"==typeof t&&(this[H]=t)}},{key:"titleLocation",get:function(){return this[V]},set:function(t){t&&"string"==typeof t&&(this[V]=t)}},{key:"gridType",get:function(){return this[W]},set:function(t){t&&"string"==typeof t&&(this[W]=t)}},{key:"gridVisible",get:function(){return this[U]},set:function(t){"boolean"==typeof t&&(this[U]=t)}},{key:"gridColor",get:function(){return this[Y]},set:function(t){t&&"string"==typeof t&&(this[Y]=t)}},{key:"borderType",get:function(){return this[B]},set:function(t){t&&"string"==typeof t&&(this[B]=t)}},{key:"borderVisible",get:function(){return this[X]},set:function(t){"boolean"==typeof t&&(this[X]=t)}},{key:"borderColor",get:function(){return this[z]},set:function(t){t&&"string"==typeof t&&(this[z]=t)}},{key:"borderWidth",get:function(){return this[q]},set:function(t){"number"==typeof t&&(this[q]=t)}},{key:"axisX",get:function(){return this[K]},set:function(t){t instanceof F&&(this[K]=t)}},{key:"axisY",get:function(){return this[J]},set:function(t){t instanceof F&&(this[J]=t)}},{key:"tics",get:function(){return this[Z]},set:function(t){t instanceof R&&(this[Z]=t)}},{key:"tableVisible",get:function(){return this[$]},set:function(t){"boolean"==typeof t&&(this[$]=t)}}])&&G(e.prototype,n),r&&G(e,r),t}());function tt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var et=function(){function t(e,n,r,o,a,s,u){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.type=e||"",this.legend=n||"",this.color=r||"",this.visible="boolean"!=typeof o||o,this.datas=i(a)&&a.length?a:[],this.func="function"==typeof s?s:null,this.dotNum=u||0}var e,n,r;return e=t,(n=[{key:"Update",value:function(t,e,n,r,o,a,s){this.type=t||this.type,this.legend=e||this.legend,this.color=n||this.color,this.visible="boolean"==typeof r?r:this.visible,this.datas=i(o)&&o.length?o:this.datas,this.func="function"==typeof a?a:this.func,this.dotNum=s||this.dotNum}}])&&tt(e.prototype,n),r&&tt(e,r),t}();function nt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var rt=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.Invalidated=!0,this.lineDatas=new Map,this.config=new Q,this.InitModel(e),this.viewHandler=null}var e,n,r;return e=t,(n=[{key:"SetViewHandler",value:function(t){this.viewHandler=t}},{key:"InitModel",value:function(t){var e=this;i(t)&&(t.linedatas.length&&t.linedatas.forEach(function(t){var n=t.id,r=t.type,i=t.legend,o=t.color,a=t.visible,s=t.datas,u=t.func,c=t.dotNum;e.lineDatas.set(n,new et(r,i,o,a,s,u,c))}),i(t.config)&&this.config&&this.config.Init(t.config))}},{key:"UpdateModel",value:function(t){var e=this;i(t)&&(Object.prototype.hasOwnProperty.call(t,"linedatas")&&(this.lineDatas.clear(),t.linedatas.forEach(function(t){var n=t.id,r=t.type,i=t.legend,o=t.color,a=t.visible,s=t.datas,u=t.func,c=t.dotNum;e.lineDatas.set(n,new et(r,i,o,a,s,u,c))})),i(t.config)&&this.config&&this.config.Init(t.config),this.viewHandler&&this.viewHandler.UpdateViewModel())}},{key:"AddLine",value:function(t){var e=t.id,n=t.type,r=t.legend,i=t.color,a=t.visible,s=t.datas,u=t.func,c=t.dotNum;return!this.lineDatas.has(e)&&(this.lineDatas.set(e,new et(n,r,i,a,s,u,c)),this.viewHandler&&this.viewHandler.UpdateViewModel(o,e),!0)}},{key:"DeleteLine",value:function(t){this.lineDatas.delete(t),this.viewHandler&&this.viewHandler.UpdateViewModel(a,t)}},{key:"UpdateLine",value:function(t){var e=t.id,n=t.type,r=t.legend,i=t.color,o=t.visible,a=t.datas,u=t.func,c=t.dotNum;this.lineDatas.has(e)?this.lineDatas.get(e).Update(n,r,i,o,a,u,c):this.lineDatas.set(e,new et(n,r,i,o,a,u,c)),this.viewHandler&&this.viewHandler.UpdateViewModel(s,e)}},{key:"SetFont",value:function(t){this.config.font=t,this.viewHandler&&this.viewHandler.UpdateViewModel(u)}},{key:"SetTitle",value:function(t){this.config.title=t,this.viewHandler&&this.viewHandler.UpdateViewModel(c)}},{key:"SetTitleColor",value:function(t){this.config.titleColor=t,this.viewHandler&&this.viewHandler.UpdateViewModel(l)}},{key:"SetTitleLocation",value:function(t){this.config.titleLocation=t,this.viewHandler&&this.viewHandler.UpdateViewModel(f)}},{key:"ShowGrid",value:function(t){this.config.gridVisible=t,this.viewHandler&&this.viewHandler.UpdateViewModel(h)}},{key:"SetGridColor",value:function(t){this.config.gridColor=t,this.viewHandler&&this.viewHandler.UpdateViewModel(v)}},{key:"ShowBorder",value:function(t){this.config.borderVisible=t,this.viewHandler&&this.viewHandler.UpdateViewModel(d)}},{key:"SetBorderColor",value:function(t){this.config.borderColor=t,this.viewHandler&&this.viewHandler.UpdateViewModel(p)}},{key:"SetBorderWidth",value:function(t){this.config.borderWidth=t,this.viewHandler&&this.viewHandler.UpdateViewModel(y)}},{key:"ShowTics",value:function(t){this.config.tics.SetVisible(t),this.viewHandler&&this.viewHandler.UpdateViewModel(g)}},{key:"SetTicsColor",value:function(t){this.config.tics.SetColor(t),this.viewHandler&&this.viewHandler.UpdateViewModel(b)}},{key:"SetTicsValue",value:function(t){this.config.tics.SetValue(t),this.viewHandler&&this.viewHandler.UpdateViewModel(w)}},{key:"ShowAxisXLabel",value:function(t){this.config.axisX.SetVisible(t),this.viewHandler&&this.viewHandler.UpdateViewModel(x)}},{key:"SetAxisXLabel",value:function(t){this.config.axisX.SetLabel(t),this.viewHandler&&this.viewHandler.UpdateViewModel(m)}},{key:"SetAxisXLabelLocation",value:function(t){this.config.axisX.SetLocation(t),this.viewHandler&&this.viewHandler.UpdateViewModel(S)}},{key:"SetAxisXLabelColor",value:function(t){this.config.axisX.SetColor(t),this.viewHandler&&this.viewHandler.UpdateViewModel(M)}},{key:"SetAxisXRange",value:function(t){this.config.axisX.SetRange(t),this.viewHandler&&this.viewHandler.UpdateViewModel(k)}},{key:"ShowAxisYLabel",value:function(t){this.config.axisY.SetVisible(t),this.viewHandler&&this.viewHandler.UpdateViewModel(P)}},{key:"SetAxisYLabel",value:function(t){this.config.axisY.SetLabel(t),this.viewHandler&&this.viewHandler.UpdateViewModel(D)}},{key:"SetAxisYLabelLocation",value:function(t){this.config.axisY.SetLocation(t),this.viewHandler&&this.viewHandler.UpdateViewModel(_)}},{key:"SetAxisYLabelColor",value:function(t){this.config.axisY.SetColor(t),this.viewHandler&&this.viewHandler.UpdateViewModel(E)}},{key:"SetAxisYRange",value:function(t){this.config.axisY.SetRange(t),this.viewHandler&&this.viewHandler.UpdateViewModel(T)}},{key:"ShowTable",value:function(t){this.config.tableVisible=t,this.viewHandler&&this.viewHandler.UpdateViewModel(O)}}])&&nt(e.prototype,n),r&&nt(e,r),t}(),it={DrawTitle:function(t,e,n){var r=n.text,i=n.color,o=n.position;t.save(),t.font="20px ".concat(e),t.textAlign="center",t.textBaseline="middle",i&&(t.fillStyle=i),t.fillText(r,o.x,o.y),t.restore()},DrawLegends:function(t,e,n,r){t.save(),t.font="14px ".concat(e),t.textAlign="left",t.textBaseline="top";r.forEach(function(e){var r=e.color,i=e.legend,o=e.point;t.save(),t.fillText(i,n.x+o.x+15+5,n.y+o.y),r&&(t.fillStyle=r),t.fillRect(n.x+o.x,n.y+o.y,15,15),t.restore()}),t.restore()},DrawAxis:function(t,e,n){var r=n.xLabel,i=n.yLabel;t.save(),t.font="14px ".concat(e),t.textAlign="center",t.textBaseline="middle",r.visible&&(r.color&&(t.fillStyle=r.color),t.fillText(r.text,r.position.x,r.position.y)),i.visible&&(t.translate(i.position.x,i.position.y),t.rotate(-.5*Math.PI),i.color&&(t.fillStyle=i.color),t.fillText(i.text,0,0)),t.restore()},DrawBorder:function(t,e,n){var r=n.visible,i=(n.type,n.color),o=n.width;r&&(t.save(),i&&(t.strokeStyle=i),o&&(t.lineWidth=o),t.strokeRect(e.x,e.y,e.w,e.h),t.restore())},DrawGrid:function(t,e,n,r,i){var o=i.xTics,a=i.yTics,s=r.visible,u=(r.type,r.color);s&&(t.save(),t.strokeStyle=u,t.lineWidth=.3,o.forEach(function(e,r,i){0!==r&&r!==i.length-1&&(t.beginPath(),t.moveTo(e.x,e.y),t.lineTo(e.x,e.y-n),t.stroke())}),a.forEach(function(n,r,i){0!==r&&r!==i.length-1&&(t.beginPath(),t.moveTo(n.x,n.y),t.lineTo(n.x+e,n.y),t.stroke())}),t.restore())},DrawTics:function(t,e,n,r){var i=r.visible,o=r.color,a=r.xTics,s=r.yTics;if(i){t.save(),o&&(t.strokeStyle=o,t.fillStyle=o),t.lineWidth=.3,t.textAlign="center",t.textBaseline="middle",a.forEach(function(e,r,i){var o,a=e.y+10;o=0===r?e.y-n:e.y,t.beginPath(),t.moveTo(e.x,a),t.lineTo(e.x,o),t.stroke(),t.fillText(e.value,e.x,e.y+10+15)}),s.forEach(function(n,r,i){var o,a=n.x-10;o=0===r?n.x+e:n.x,t.beginPath(),t.moveTo(a,n.y),t.lineTo(o,n.y),t.stroke(),t.fillText(n.value,n.x-10-15,n.y)}),t.restore()}},DrawLines:function(t,e,n){t.save(),t.lineWidth=3;var r=new Path2D;r.rect(e.x,e.y,e.w,e.h),t.clip(r,"evenodd"),n.forEach(function(n){var r=n.points,i=n.color;t.strokeStyle=i;var o=!0,a=r[0].y;r.forEach(function(n,r){n.y<e.y?a=e.y-5:n.y>e.y+e.h&&(a=e.y+e.h+5),!0===o?(t.beginPath(),t.moveTo(n.x,a||n.y),o=!1):t.lineTo(n.x,a||n.y),a=NaN}),t.stroke()}),t.restore()},DrawTable:function(t,e,n,r){var i=r.visible,o=r.selectedTic,a=r.colors,s=r.legends,u=r.legendWidth,c=r.datas;if(i&&!isNaN(o)&&a&&s&&u&&c){t.save(),t.font="14px ".concat(e),t.textAlign="left",t.textBaseline="top";var l=c[o];if(l&&l.canvasPos){var f=[];f[0]=l.canvasPos.y-23;for(var h=1;h<=l.length+1;h++)f[h]=f[h-1]+23;var v=[];v[0]=l.canvasPos.x+20,v[1]=v[0]+16+15+u,v[2]=v[1]+8+l.width;var d=(n.x+n.w)/2,p=v[2]-v[0];l.canvasPos.x>d?{x:(v=v.map(function(t){return t-p-40}))[2],y:f[0]}:{x:v[0],y:f[0]},t.save(),t.globalAlpha=.5,t.fillStyle="white",t.fillRect(v[0],f[0],v[2]-v[0],f[l.length+1]-f[0]),t.strokeStyle="#999999",t.strokeRect(v[0],f[0],v[2]-v[0],f[l.length+1]-f[0]);for(var y=1;y<=l.length;y++)t.beginPath(),t.moveTo(v[0],f[y]),t.lineTo(v[2],f[y]),t.stroke();t.beginPath(),t.moveTo(v[1],f[1]),t.lineTo(v[1],f[l.length+1]),t.stroke(),t.restore(),t.fillText("".concat(o),v[0]+4,f[0]+4);for(var g=0;g<l.length;g++)t.save(),t.fillText("".concat(s[g]),v[0]+15+12,f[g+1]+4),t.fillText("".concat(l[g].dataPos.toFixed(3)),v[1]+4,f[g+1]+4),t.fillStyle=a[g],t.fillRect(v[0]+4,f[g+1]+4,15,15),l[g].canvasPos>=n.y&&l[g].canvasPos<=n.y+n.h&&(t.beginPath(),t.arc(l.canvasPos.x,l[g].canvasPos,4,0,2*Math.PI),t.fill()),t.restore();t.restore()}}},Draw:function(t,e){var n=e.font,r=e.title,i=(e.legend,e.border),o=e.axis,a=e.grid,s=e.tics,u=e.lineDatas,c=e.legendDatas,l=e.tableData,f=e.canvasWidth,h=e.canvasHeight,v=e.graphRect,d=e.legendRect;t.font="12px ".concat(n),t.clearRect(0,0,f,h),it.DrawTitle(t,n,r),it.DrawBorder(t,v,i),it.DrawTics(t,v.w,v.h,s),it.DrawGrid(t,v.w,v.h,a,s),it.DrawAxis(t,n,o),it.DrawLines(t,v,u),it.DrawLegends(t,n,d,c),it.DrawTable(t,n,v,l)}},ot=it;function at(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var st=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.presentationCanvas=e,this.dpr=n,this.backgroundCanvas=document.createElement("canvas"),this.backgroundContext=this.backgroundCanvas.getContext("2d"),this.backgroundContext.scale(this.dpr,this.dpr)}var e,n,r;return e=t,(n=[{key:"Draw",value:function(t){ot.Draw(this.backgroundContext,t),this.presentationContext.drawImage(this.backgroundCanvas)}}])&&at(e.prototype,n),r&&at(e,r),t}(),ut=n(110),ct=n.n(ut);function lt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var ft=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.presentationCanvas=e,this.offscreenCanvas=this.presentationCanvas.transferControlToOffscreen(),this.dpr=n,this.worker=new ct.a,this.worker.postMessage({canvas:this.offscreenCanvas,dpr:this.dpr},[this.offscreenCanvas])}var e,n,r;return e=t,(n=[{key:"Draw",value:function(t){this.worker.postMessage({drawData:t})}}])&&lt(e.prototype,n),r&&lt(e,r),t}(),ht={PLATFORM_TYPE:{NODE:0,BROWSER:1},BROWSER_TYPE:{lAZY:0,CHROME:1,IE_11:2,EDGE:3,SAFARI:4,FIREFOX:5}};ht.currentPlaform=ht.PLATFORM_TYPE.BROWSER,ht.currentBrowser=ht.BROWSER_TYPE.CHROME,ht.IsAvailableOffScreen=ht.currentPlaform===ht.PLATFORM_TYPE.NODE||ht.currentBrowser===ht.BROWSER_TYPE.CHROME;var vt=ht,dt={Create:function(t,e){return t?vt.IsAvailableOffScreen?new ft(t,e):new st(t,e):null}};function pt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var yt=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var n=window.devicePixelRatio||1,r=e.width,i=e.height;e.width=r*n,e.height=i*n,this.canvasHelper=dt.Create(e,n)}var e,n,r;return e=t,(n=[{key:"Draw",value:function(t){t&&this.canvasHelper.Draw(t)}}])&&pt(e.prototype,n),r&&pt(e,r),t}();function gt(t){return(gt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function bt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var wt,xt,mt,St,Mt,kt=(wt=80,xt=20,mt=80,St=70,Mt=function(t){var e=50;switch(t.toLowerCase()){case"left":case"top":e=20;break;case"right":case"bottom":e=80}return e},function(){function t(e,n,r,i,o){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.font=e,this.axisX=n,this.axisY=r,this.canvasWidth=i,this.canvasHeight=o,this.graphRect={x:wt,y:mt,w:this.canvasWidth-(wt+xt),h:this.canvasHeight-(mt+St)}}var e,n,r;return e=t,(n=[{key:"GetGraphRect",value:function(){return this.graphRect}},{key:"GetLegendRect",value:function(){return this.legendRect}},{key:"GetTitlePos",value:function(t){var e=Mt(t);return{x:this.graphRect.x+this.graphRect.w*e/100,y:mt/2}}},{key:"GetAxisXPos",value:function(t){var e=Mt(t);return{x:this.graphRect.x+this.graphRect.w*e/100,y:this.graphRect.y+this.graphRect.h+50}}},{key:"GetAxisYPos",value:function(t){var e=Mt(t);return{x:this.graphRect.x-50,y:this.graphRect.y+this.graphRect.h*e/100}}},{key:"GetxTics",value:function(t){for(var e=[],n=this.axisX.range.start,r=null;n<=this.axisX.range.end;)(r=this.DataPoint2CanvasPoint(n,this.axisY.range.start)).value=n,e.push(r),n+=t;return e}},{key:"GetyTics",value:function(t){if(t<=0)return null;for(var e=[],n=this.axisY.range.start,r=null;n<=this.axisY.range.end;)(r=this.DataPoint2CanvasPoint(this.axisX.range.start,n)).value=n,e.push(r),n+=t;return e}},{key:"CanvasPoint2DataPoint",value:function(t){var e=t.x,n=t.y,r=this.CanvasPoint2GraphPoint(e,n);return r?this.GraphPoint2DataPoint(r):null}},{key:"DataPoint2CanvasPoint",value:function(t,e){var n=this.DataPoint2GraphPoint(t,e);return n?this.GraphPoint2CanvasPoint(n):null}},{key:"GraphPoint2DataPoint",value:function(t){var e=t.x,n=t.y;if("number"!=typeof e||"number"!=typeof n)return null;var r={};return r.x=e/this.graphRect.w*this.axisX.range.value+this.axisX.range.start,r.y=n/this.graphRect.h*this.axisY.range.value+this.axisY.range.start,r}},{key:"DataPoint2GraphPoint",value:function(t,e){if(!this.axisX.range||!this.axisY.range||"number"!=typeof t||"number"!=typeof e||this.axisX.range.start>t||this.axisX.range.end<t)return null;var n={};return n.x=(t-this.axisX.range.start)/this.axisX.range.value*this.graphRect.w,n.y=(e-this.axisY.range.start)/this.axisY.range.value*this.graphRect.h,n}},{key:"CanvasPoint2GraphPoint",value:function(t,e){if("number"!=typeof t||"number"!=typeof e)return null;var n={};return n.x=t-this.graphRect.x,n.y=this.graphRect.y+this.graphRect.h-e,n.x>this.graphRect.w||n.x<0?null:n}},{key:"GraphPoint2CanvasPoint",value:function(t){var e=t.x,n=t.y;if("number"!=typeof e||"number"!=typeof n)return null;var r={};return r.x=this.graphRect.x+e,r.y=this.graphRect.y+this.graphRect.h-n,r.x>this.graphRect.x+this.graphRect.w||r.x<this.graphRect.x?null:r}},{key:"GetLineDatas",value:function(t){var e=this,n=new Map;return t.forEach(function(t,r){n.set(r,e.GetLineData(t))}),n}},{key:"GetLineData",value:function(t){var e=this,n=t.type,r=(t.legend,t.color),i=t.visible,o=t.datas,a=t.func,s=t.dotNum;if(!i)return null;var u,c,l=[],f=null;if("func"===n&&"function"==typeof a)for(var h=this.axisX.range.value/s,v=0;v<=s;v++)u=v*h+this.axisX.range.start,c=a(u*("PI"===this.axisX.type?Math.PI:1)),"number"!=typeof u&&(u=NaN),"number"!=typeof c&&(c=NaN),(f=this.DataPoint2CanvasPoint(u,c))&&l.push(f);else"object"===gt(o)&&o.length&&o.forEach(function(t){u=t.x,c=t.y,"number"!=typeof u&&(u=NaN),"number"!=typeof c&&(c=NaN),(f=e.DataPoint2CanvasPoint(u,c))&&l.push(f)});return{points:l,color:r}}},{key:"GetLegendDatas",value:function(t){var e=[],n={x:this.graphRect.x,y:this.graphRect.y+this.graphRect.h+St,w:this.graphRect.w,h:0},r=document.createElement("canvas").getContext("2d"),i=0,o=0;return r.save(),r.font="14px ".concat(this.font),t.forEach(function(t,a){var s=t.legend,u=t.color,c={x:0,y:0};t.visible&&(0===n.h&&(n.h=30),o=30+r.measureText(s).width,(i+=o)>n.w&&(n.h+=30,i=o),c.x=i-o,c.y=n.h-30,e.push({legend:s,color:u,point:c}))}),r.restore(),this.legendRect=n,this.graphRect.h=this.canvasHeight-(mt+St+this.legendRect.h),this.legendRect.y=this.graphRect.y+this.graphRect.h+St,e}},{key:"GetSelectedTic",value:function(t,e){if(null==t||null==e)return NaN;var n=this.CanvasPoint2DataPoint(t);return null===n?NaN:function t(e,n){var r=Math.floor(e.length/2);return n===e[r]?e[r]:n<e[r+1]&&n>e[r]?Math.abs(n-e[r])<Math.abs(n-e[r+1])?e[r]:e[r+1]:e[r]<n&&e.length>1?t(e.splice(r,Number.MAX_VALUE),n):e[r]>n&&e.length>1?t(e.splice(0,r),n):e[r]}(Object.keys(e).map(Number).filter(function(t){return!isNaN(t)}).sort(function(t,e){return t-e}),n.x)}},{key:"GetTableDatas",value:function(t,e){var n=this;if(!t||0===t.length)return null;var r={},i=-1,o=0,a=0,s=document.createElement("canvas").getContext("2d");if(s.font="14px ".concat(this.font),t.forEach(function(t){var u,c,l=t.type,f=t.legend,h=t.color,v=t.visible,d=t.datas,p=t.func;if(t.dotNum,v)if(i++,a=s.measureText(f).width,o=o>a?o:a,r.legends||(r.legends=[]),r.colors||(r.colors=[]),r.datas||(r.datas=[]),r.legends[i]=f,r.colors[i]=h,"func"===l&&"function"==typeof p){u=n.axisX.range.start;for(var y=[];u<=n.axisX.range.end;)c=p(u*("PI"===n.axisX.type?Math.PI:1)),"number"!=typeof u&&(u=NaN),"number"!=typeof c&&(c=NaN),y.push({x:u,y:c}),u+=e;y.forEach(function(t,o,a){u=t.x,c=t.y,"number"!=typeof u&&(u=NaN),"number"!=typeof c&&(c=NaN),r.datas[u]||(r.datas[u]=[]),r.datas[u][i]={dataPos:c,canvasPos:n.DataPoint2CanvasPoint(0,c).y},u+=e})}else"object"===gt(d)&&d.length&&d.forEach(function(t,e,o){u=t.x,c=t.y,"number"!=typeof u&&(u=NaN),"number"!=typeof c&&(c=NaN),r.datas[u]||(r.datas[u]=[]),r.datas[u][i]={dataPos:c,canvasPos:n.DataPoint2CanvasPoint(0,c).y}})}),!r.datas||0===r.datas.length)return null;var u=0,c=0;return Object.keys(r.datas).forEach(function(t){r.datas[t].forEach(function(t){c=s.measureText(t.dataPos.toFixed(3)).width,u=u>c?u:c});var e=r.datas[t].filter(function(t){return t.dataPos>=n.axisY.range.start&&t.dataPos<=n.axisY.range.end});e.length>0&&(r.datas[t].canvasPos=n.DataPoint2CanvasPoint(parseInt(t,10),e.reduce(function(t,e){return t.dataPos+=e.dataPos,t}).dataPos/e.length),r.datas[t].width=u)}),r.legendWidth=o,r}}])&&bt(e.prototype,n),r&&bt(e,r),t}());function Pt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Dt=function(){function t(e,n,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.graphModel=e,this.canvasWidth=n,this.canvasHeight=r,this.drawData={font:"",title:{text:"",color:"black",position:null},border:{visible:!0,type:"",color:"",width:1,rect:null},grid:{visible:!0,type:"",color:""},axis:{xLabel:{visible:!0,text:"",color:"black",position:null},yLabel:{visible:!0,text:"",color:"black",position:null}},tics:{visible:!0,color:"black",xTics:null,yTics:null},lineDatas:null,legendDatas:null,tableData:{visible:!0,selectedTic:NaN,colors:[],legends:[],datas:[]}},this.Init(),this.invalidated=!0}var e,n,r;return e=t,(n=[{key:"GetDrawData",value:function(){return this.drawData}},{key:"IsInGraph",value:function(t){var e=this.viewModelHelper.GetGraphRect();return t.x<=e.x+e.w&&t.x>=e.x&&t.y<=e.y+e.h&&t.y>=e.y}},{key:"GetNewTic",value:function(t){var e=this.viewModelHelper.GetSelectedTic(t,this.drawData.tableData.datas);return this.drawData.tableData.selectedTic!==e?{result:!0,selectedTic:e}:{result:!1,selectedTic:null}}},{key:"Init",value:function(){if(this.graphModel){var t=this.graphModel.config,e=t.font,n=(t.legendVisible,t.title),r=t.titleColor,i=t.titleLocation,o=t.gridType,a=t.gridVisible,s=t.gridColor,u=t.borderType,c=t.borderVisible,l=t.borderColor,f=t.borderWidth,h=t.axisX,v=t.axisY,d=t.tics,p=t.tableVisible;this.viewModelHelper=new kt(e,h,v,this.canvasWidth,this.canvasHeight),this.drawData.canvasWidth=this.canvasWidth,this.drawData.canvasHeight=this.canvasHeight,this.drawData.legendDatas=this.viewModelHelper.GetLegendDatas(this.graphModel.lineDatas),this.drawData.graphRect=this.viewModelHelper.GetGraphRect(),this.drawData.legendRect=this.viewModelHelper.GetLegendRect(),this.drawData.font=e,this.drawData.title.text=n,this.drawData.title.color=r,this.drawData.title.position=this.viewModelHelper.GetTitlePos(i),this.drawData.border.visible=c,this.drawData.border.type=u,this.drawData.border.color=l,this.drawData.border.width=f,this.drawData.grid.visible=a,this.drawData.grid.type=o,this.drawData.grid.color=s,this.drawData.axis.xLabel.visible=h.visible,this.drawData.axis.xLabel.text=h.label,this.drawData.axis.xLabel.color=h.color,this.drawData.axis.xLabel.position=this.viewModelHelper.GetAxisXPos(h.location),this.drawData.axis.yLabel.visible=v.visible,this.drawData.axis.yLabel.text=v.label,this.drawData.axis.yLabel.color=v.color,this.drawData.axis.yLabel.position=this.viewModelHelper.GetAxisYPos(v.location),this.drawData.tics.visible=d.visible,this.drawData.tics.color=d.color,this.drawData.tics.xTics=this.viewModelHelper.GetxTics(d.value.x),this.drawData.tics.yTics=this.viewModelHelper.GetyTics(d.value.y),this.drawData.lineDatas=this.viewModelHelper.GetLineDatas(this.graphModel.lineDatas);var y=this.viewModelHelper.GetTableDatas(this.graphModel.lineDatas,d.value.x);y?(this.drawData.tableData.visible=p,this.drawData.tableData.colors=y.colors,this.drawData.tableData.legends=y.legends,this.drawData.tableData.legendWidth=y.legendWidth,this.drawData.tableData.datas=y.datas):(this.drawData.tableData.legendWidth=0,this.drawData.tableData.datas=null)}}},{key:"InvalidateModel",value:function(t,e){if(this.graphModel){switch(t){case o:case s:case a:this.drawData.legendDatas=this.viewModelHelper.GetLegendDatas(this.graphModel.lineDatas),this.drawData.graphRect=this.viewModelHelper.GetGraphRect(),this.drawData.legendRect=this.viewModelHelper.GetLegendRect(),t===a?this.drawData.lineDatas.delete(e):this.drawData.lineDatas.set(e,this.viewModelHelper.GetLineData(this.graphModel.lineDatas.get(e))),this.drawData.tics.xTics=this.viewModelHelper.GetxTics(this.graphModel.config.tics.value.x),this.drawData.tics.yTics=this.viewModelHelper.GetyTics(this.graphModel.config.tics.value.y),this.drawData.axis.xLabel.position=this.viewModelHelper.GetAxisXPos(this.graphModel.config.axisX.location),this.drawData.axis.yLabel.position=this.viewModelHelper.GetAxisYPos(this.graphModel.config.axisY.location);var n=this.viewModelHelper.GetTableDatas(this.graphModel.lineDatas,this.graphModel.config.tics.value.x);n?(this.drawData.tableData.legendWidth=n.legendWidth,this.drawData.tableData.datas=n.datas):(this.drawData.tableData.legendWidth=0,this.drawData.tableData.datas=null);break;case u:this.drawData.font=this.graphModel.config.font,this.viewModelHelper.font=this.graphModel.config.font,this.drawData.legendDatas=this.viewModelHelper.GetLegendDatas(this.graphModel.lineDatas);var r=this.viewModelHelper.GetTableDatas(this.graphModel.lineDatas,this.graphModel.config.tics.value.x);r?(this.drawData.tableData.legendWidth=r.legendWidth,this.drawData.tableData.datas=r.datas):(this.drawData.tableData.legendWidth=0,this.drawData.tableData.datas=null);break;case c:this.drawData.title.text=this.graphModel.config.title;break;case l:this.drawData.title.color=this.graphModel.config.titleColor;break;case f:this.drawData.title.position=this.viewModelHelper.GetTitlePos(this.graphModel.config.titleLocation);break;case h:this.drawData.grid.visible=this.graphModel.config.gridVisible;break;case v:this.drawData.grid.color=this.graphModel.config.gridColor;break;case d:this.drawData.border.visible=this.graphModel.config.borderVisible;break;case p:this.drawData.border.color=this.graphModel.config.borderColor;break;case y:this.drawData.border.width=this.graphModel.config.borderWidth;break;case g:this.drawData.tics.visible=this.graphModel.config.tics.visible;break;case b:this.drawData.tics.color=this.graphModel.config.tics.color;break;case x:this.drawData.axis.xLabel.visible=this.graphModel.config.axisX.visible;break;case m:this.drawData.axis.xLabel.text=this.graphModel.config.axisX.label;break;case S:this.drawData.axis.xLabel.position=this.viewModelHelper.GetAxisXPos(this.graphModel.config.axisX.location);break;case M:this.drawData.axis.xLabel.color=this.graphModel.config.axisX.color;break;case P:this.drawData.axis.yLabel.visible=this.graphModel.config.axisY.visible;break;case D:this.drawData.axis.yLabel.text=this.graphModel.config.axisY.label;break;case _:this.drawData.axis.yLabel.position=this.viewModelHelper.GetAxisYPos(this.graphModel.config.axisY.location);break;case E:this.drawData.axis.yLabel.color=this.graphModel.config.axisY.color;break;case L:this.drawData.tableData.selectedTic=e;break;case k:case w:case T:default:this.Init()}this.invalidated=!0}}}])&&Pt(e.prototype,n),r&&Pt(e,r),t}();function _t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Et=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvasWidth=e.width,this.canvasHeight=e.height,this.graphCanvas=new yt(e),this.viewModel=null,this.modelHandler=null,this.renderStack=0,this.BindEvent(e)}var e,n,r;return e=t,(n=[{key:"SetModelHandler",value:function(t){this.modelHandler=t}},{key:"BindEvent",value:function(t,e){if(t){var n=1,r=2,i=4,o=e;void 0===o&&(o=7);var a=function(t){var e={x:t.offsetX,y:t.offsetY};if(this.viewModel&&this.viewModel.IsInGraph(e))switch(t.type){case"keydown":case"keyup":case"keypress":case"click":case"dbclick":break;case"mousemove":if(!this.graphCanvas||!this.modelHandler||!this.viewModel)return;var n=this.viewModel.GetNewTic(e);n.result&&this.UpdateViewModel(L,n.selectedTic);break;case"mousedown":case"mouseup":break;case"wheel":if(!0===t.ctrlKey){var r=this.modelHandler.GetModel(),i=r.config.axisX.range,o=r.config.axisY.range,a=r.config.tics.value.x,s=r.config.tics.value.y,u=3*a,c=3*s,l=100*a,f=100*s;if(t.deltaY<=0){if(i.value<=u||o.value<=c)break;a*=-1,s*=-1}else if(i.value>=l||o.value>=f)break;var h={config:{axis:{x:{range:{start:i.start-a,end:i.end+a}},y:{range:{start:o.start-s,end:o.end+s}}}}};this.UpdateModel(h)}}}.bind(this),s=[];o&n&&["keydown","keyup","keypress"].forEach(function(t){s.push(t)}),o&r&&["click","dbclick","mousemove","mousedown","mouseup"].forEach(function(t){s.push(t)}),o&i&&["wheel"].forEach(function(t){s.push(t)});for(var u=0;u<s.length;u++)t.addEventListener(s[u],a)}}},{key:"UpdateModel",value:function(t){this.modelHandler.UpdateModel(t)}},{key:"UpdateViewModel",value:function(t,e){this.graphCanvas&&this.modelHandler&&(this.viewModel?this.viewModel.InvalidateModel(t,e):this.viewModel=new Dt(this.modelHandler.GetModel(),this.canvasWidth,this.canvasHeight),this.renderStack++)}},{key:"Render",value:function(){this.renderStack>0&&this.viewModel.invalidated&&(this.graphCanvas.Draw(this.viewModel.GetDrawData()),this.renderStack--,this.viewModel.invalidated=!1),requestAnimationFrame(this.Render.bind(this))}}])&&_t(e.prototype,n),r&&_t(e,r),t}();function Tt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Ot=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.GraphModel=e,this.GraphView=n,this.GraphModel.SetViewHandler(this._getviewHandler()),this.GraphView.SetModelHandler(this._getModelHandler()),this.GraphView.UpdateViewModel(),this.GraphView.Render()}var e,n,r;return e=t,(n=[{key:"_getviewHandler",value:function(){return{UpdateViewModel:function(t,e){this.GraphView.UpdateViewModel(t,e)}.bind(this)}}},{key:"_getModelHandler",value:function(){return{GetModel:function(){return this.GraphModel}.bind(this),UpdateModel:function(t){this.GraphModel.UpdateModel(t)}.bind(this)}}}])&&Tt(e.prototype,n),r&&Tt(e,r),t}();function Lt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n.d(e,"default",function(){return At});var At=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.GraphModel=new rt(n),this.GraphView=new Et(e),this.Presenter=new Ot(this.GraphModel,this.GraphView)}var e,n,r;return e=t,(n=[{key:"UpdateGraph",value:function(t){this.GraphModel.UpdateModel(t)}},{key:"AddLine",value:function(t){this.GraphModel.UpdateLine(t)}},{key:"DeleteLine",value:function(t){this.GraphModel.DeleteLine(t)}},{key:"UpdateLine",value:function(t){this.GraphModel.UpdateLine(t)}},{key:"SetFont",value:function(t){this.GraphModel.SetFont(t)}},{key:"SetTitle",value:function(t){this.GraphModel.SetTitle(t)}},{key:"SetTitleColor",value:function(t){this.GraphModel.SetTitleColor(t)}},{key:"SetTitleLocation",value:function(t){this.GraphModel.SetTitleLocation(t)}},{key:"ShowGrid",value:function(t){this.GraphModel.ShowGrid(t)}},{key:"SetGridColor",value:function(t){this.GraphModel.SetGridColor(t)}},{key:"ShowBorder",value:function(t){this.GraphModel.ShowBorder(t)}},{key:"SetBorderColor",value:function(t){this.GraphModel.SetBorderColor(t)}},{key:"SetBorderWidth",value:function(t){this.GraphModel.SetBorderWidth(t)}},{key:"ShowTics",value:function(t){this.GraphModel.ShowTics(t)}},{key:"SetTicsColor",value:function(t){this.GraphModel.SetTicsColor(t)}},{key:"SetTicsValue",value:function(t){this.GraphModel.SetTicsValue(t)}},{key:"ShowAxisXLabel",value:function(t){this.GraphModel.ShowAxisXLabel(t)}},{key:"SetAxisXLabel",value:function(t){this.GraphModel.SetAxisXLabel(t)}},{key:"SetAxisXLabelLocation",value:function(t){this.GraphModel.SetAxisXLabelLocation(t)}},{key:"SetAxisXLabelColor",value:function(t){this.GraphModel.SetAxisXLabelColor(t)}},{key:"ShowAxisYLabel",value:function(t){this.GraphModel.ShowAxisYLabel(t)}},{key:"SetAxisYLabel",value:function(t){this.GraphModel.SetAxisYLabel(t)}},{key:"SetAxisYLabelLocation",value:function(t){this.GraphModel.SetAxisYLabelLocation(t)}},{key:"SetAxisYLabelColor",value:function(t){this.GraphModel.SetAxisYLabelColor(t)}},{key:"ShowTable",value:function(t){this.GraphModel.ShowTable(t)}},{key:"SaveAsPDF",value:function(){this.GraphView.SaveAsPDF()}},{key:"SaveAsImage",value:function(){this.GraphView.SaveAsImage()}}])&&Lt(e.prototype,n),r&&Lt(e,r),t}();window.Plotta=At}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,